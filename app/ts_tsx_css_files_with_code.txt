File: globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}
/* Кастомные стили для скрытия скроллбаров */
.hide-scrollbar::-webkit-scrollbar {
  display: none; /* Для Webkit-браузеров */
}

.hide-scrollbar {
  -ms-overflow-style: none;  /* Для Internet Explorer и Edge */
  scrollbar-width: none;  /* Для Firefox */
}




/* globals.css */
:root {
  --font-mulish: 'Mulish', sans-serif;
}

body {
  font-family: var(--font-mulish);
  font-weight: 400;
  font-style: normal;
}

.font-bold {
  font-weight: 700;
}

.font-semibold {
  font-weight: 600;
}

.font-light {
  font-weight: 300;
}

.italic {
  font-style: italic;
}

File: layout.tsx
import localFont from "next/font/local";
import "./globals.css";

// Подключаем каждый вес и стиль
const mulishRegular = localFont({
  src: "./fonts/Mulish-Regular.ttf",
  variable: "--font-mulish-regular",
});

const mulishItalic = localFont({
  src: "./fonts/Mulish-Italic.ttf",
  variable: "--font-mulish-italic",
});

const mulishLight = localFont({
  src: "./fonts/Mulish-Light.ttf",
  variable: "--font-mulish-light",
});

const mulishLightItalic = localFont({
  src: "./fonts/Mulish-LightItalic.ttf",
  variable: "--font-mulish-light-italic",
});

const mulishBold = localFont({
  src: "./fonts/Mulish-Bold.ttf",
  variable: "--font-mulish-bold",
});

const mulishBoldItalic = localFont({
  src: "./fonts/Mulish-BoldItalic.ttf",
  variable: "--font-mulish-bold-italic",
});

// Добавьте другие веса и стили аналогичным образом

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="ru">
      <body
        className={`${mulishRegular.variable} ${mulishItalic.variable} ${mulishLight.variable} ${mulishLightItalic.variable} ${mulishBold.variable} ${mulishBoldItalic.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

File: page.tsx
"use client"; // Ensure this is a Client Component
import React from 'react';
import Header from './components/Header';
import MenuGrid from './components/MenuGrid';
import ReturnButton from './components/ReturnButton';
import StartButton from './components/StartButton';
import { useRouter } from 'next/navigation'; // Updated import

const MainMenu: React.FC = () => {
    const router = useRouter();
    return (
        <div className="w-screen h-screen bg-[#1c2536] text-white flex flex-col">
            <div className="flex-grow mx-auto w-[81%]">
                <Header teamName="Команда А" tableNumber={5} />
                <MenuGrid />
            </div>
            <div className="mx-auto flex justify-between p-5 w-[81%]">
                <button
                    className="flex justify-center items-center cursor-pointer transition-colors duration-200"
                    onClick={() => router.push('/hello')}
                >
                    <img
                        src="/House.svg"
                        alt="House icon"
                        className="h-12 w-12 cursor-pointer w-[90px] h-[90px]"
                    />
                </button>
                <StartButton />
            </div>
        </div>
    );
};

export default MainMenu;


File: page.tsx

"use client";
import React from 'react';
import AdminMain from './components/AdminMain';

const AdminPage: React.FC = () => {
    return (
        <AdminMain />
    );
};

export default AdminPage;


File: AdminMain.tsx

"use client";
import React, { useState } from 'react';
import CreateGame from './CreateGame';
import CreateVenue from './CreateVenue';
import TeamsTab from './TeamsTab';
import RolesTab from './RolesTab';
import ScoreCountingTab from './ScoreCountingTab';
import PaymentsTab from './PaymentsTab';
import LotteryTab from './LotteryTab';
import PlayersTab from './Users';

const AdminMain: React.FC = () => {
    const [activeTab, setActiveTab] = useState<string>('Создание игры');

    const renderTabContent = () => {
        switch(activeTab) {
            case 'Создание игры':
                return <CreateGame />;
            case 'Создание места проведения':
                return <CreateVenue />;
            case 'Команды':
                return <TeamsTab />;
            case 'Роли':
                return <RolesTab />;
            case 'Игроки':
                    return <PlayersTab />;
            case 'Подсчёт очков':
                return <ScoreCountingTab />;
            case 'Оплаты':
                return <PaymentsTab />;
            case 'Лотерея':
                return <LotteryTab />;
            default:
                return <CreateGame />;
        }
    };

    return (
        <div className="w-screen h-screen bg-[#14213D] text-white flex flex-col items-center p-4">
            <h1 className="text-4xl font-bold mt-8 mb-6 text-center">Интерфейс Администратора</h1>
            <div className="tabs flex space-x-4 mb-6">
                {['Создание игры', 'Создание места проведения', 'Команды', 'Роли', 'Игроки', 'Подсчёт очков', 'Оплаты', 'Лотерея'].map((tab) => (
                    <button
                        key={tab}
                        className={`px-4 py-2 rounded ${
                            activeTab === tab ? 'bg-[#D4A373] text-black' : 'bg-[#1b2a49] hover:bg-[#2e3a50]'
                        } transition-colors duration-200`}
                        onClick={() => setActiveTab(tab)}
                    >
                        {tab}
                    </button>
                ))}
            </div>
            <div className="flex-grow w-full max-w-7xl">
                {renderTabContent()}
            </div>
        </div>
    );
};

export default AdminMain;


File: CreateGame.tsx
"use client";
import React, { useState, useRef } from 'react';

const CreateGame: React.FC = () => {
    const [gameName, setGameName] = useState('');
    const [gameDate, setGameDate] = useState('');
    const [gameNumber, setGameNumber] = useState('');
    const [restaurant, setRestaurant] = useState('');
    const [teams, setTeams] = useState<string[]>([]);
    const [file, setFile] = useState<File | null>(null);

    const fileInputRef = useRef<HTMLInputElement>(null);

    const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            setFile(e.target.files[0]);
        }
    };

    const handleCreateGame = () => {
        // Логика создания игры
        console.log({
            gameName,
            gameDate,
            gameNumber,
            restaurant,
            teams,
            file
        });
    };

    const handleFileButtonClick = () => {
        fileInputRef.current?.click();
    };

    return (
        <div className="bg-[#FAF3DD] text-black p-6 rounded-lg shadow-lg text-center py-20">
            <h2 className="text-2xl font-bold mb-4">Создание игры</h2>
            <div className="flex flex-col space-y-4 items-center">
                <input
                    type="text"
                    placeholder="Название игры"
                    value={gameName}
                    onChange={(e) => setGameName(e.target.value)}
                    className="p-2 rounded border w-2/3"
                />
                <input
                    type="date"
                    value={gameDate}
                    onChange={(e) => setGameDate(e.target.value)}
                    className="p-2 rounded border w-2/3"
                />
                <input
                    type="number"
                    placeholder="Номер игры"
                    value={gameNumber}
                    onChange={(e) => setGameNumber(e.target.value)}
                    className="p-2 rounded border w-2/3"
                />
                <select
                    value={restaurant}
                    onChange={(e) => setRestaurant(e.target.value)}
                    className="p-2 rounded border w-2/3"
                >
                    <option value="">Выберите ресторан</option>
                    <option value="Ресторан А">Ресторан А</option>
                    <option value="Ресторан Б">Ресторан Б</option>
                    <option value="Ресторан В">Ресторан В</option>
                </select>
                <div className="w-2/3">
                    {/* <label className="block mb-1 font-medium">Загрузить файл</label> */}
                    <div className="flex items-center space-x-2">
                        <button
                            type="button"
                            onClick={handleFileButtonClick}
                            className="flex items-center px-3 py-2 bg-[#D4A373] text-white rounded hover:bg-[#c99b6d] transition-colors duration-200"
                        >
                            {/* Новая SVG-иконка загрузки файла */}
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                className="h-5 w-5 mr-2"
                                viewBox="0 0 24 24"
                                fill="currentColor"
                            >
                                <path d="M5 20h14v-2H5v2zm7-18L5.33 9h3.34v6h6V9h3.33L12 2z" />
                            </svg>
                            Выбрать файл
                        </button>
                        {file && <span className="text-sm text-gray-700">{file.name}</span>}
                    </div>
                    <input
                        type="file"
                        accept=".xlsx,.xls,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel"
                        onChange={handleFileUpload}
                        ref={fileInputRef}
                        className="hidden"
                    />
                </div>
                <button
                    className="w-2/3 bg-[#D4A373] text-white py-2 rounded hover:bg-[#c99b6d] transition-colors duration-200"
                    onClick={handleCreateGame}
                >
                    Создать игру
                </button>
            </div>
        </div>
    );
};

export default CreateGame;


File: CreateVenue.tsx
"use client";
import React, { useState, ChangeEvent } from 'react';
import {
    XIcon,
    PlusIcon,
    UploadIcon,
    PencilAltIcon,
    TrashIcon,
    CheckIcon,
} from '@heroicons/react/outline';

// Определение структуры категории
interface Category {
    id: number;
    name: string;
}

// Определение структуры блюда
interface MenuItem {
    id: number;
    name: string;
    categoryId: number;
    price: number;
    photo?: File | null;
}

// Определение структуры места проведения
interface Venue {
    id: number;
    restaurantName: string;
    menuItems: MenuItem[];
    categories: Category[];
}

const CreateVenue: React.FC = () => {
    // Инициализация состояния с предзаполненными местами
    const [venues, setVenues] = useState<Venue[]>([
        {
            id: 1,
            restaurantName: 'La Bella Italia',
            menuItems: [
                { id: 1, name: 'Margherita Pizza', categoryId: 1, price: 12 },
                { id: 2, name: 'Spaghetti Carbonara', categoryId: 2, price: 15 },
            ],
            categories: [
                { id: 1, name: 'Пицца' },
                { id: 2, name: 'Паста' },
                { id: 3, name: 'Салаты' },
            ],
        },
        {
            id: 2,
            restaurantName: 'Sushi World',
            menuItems: [
                { id: 1, name: 'California Roll', categoryId: 4, price: 8 },
                { id: 2, name: 'Salmon Sashimi', categoryId: 5, price: 14 },
            ],
            categories: [
                { id: 4, name: 'Роллы' },
                { id: 5, name: 'Сашими' },
                { id: 6, name: 'Напитки' },
            ],
        },
    ]);

    // Состояние для управления модальным окном редактирования меню
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedVenue, setSelectedVenue] = useState<Venue | null>(null);

    // Состояния для добавления нового блюда в модальном окне
    const [newMenuItem, setNewMenuItem] = useState<MenuItem>({
        id: 0,
        name: '',
        categoryId: 0,
        price: 0,
        photo: null,
    });

    // Состояния для управления модальным окном редактирования категорий
    const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);

    // Состояния для редактирования категории
    const [localCategories, setLocalCategories] = useState<Category[]>([]);
    const [editingCategoryId, setEditingCategoryId] = useState<number | null>(null);
    const [editingCategoryName, setEditingCategoryName] = useState<string>('');
    const [newCategoryName, setNewCategoryName] = useState('');

    // Состояния для редактирования блюда
    const [editingMenuItemId, setEditingMenuItemId] = useState<number | null>(null);
    const [editedMenuItem, setEditedMenuItem] = useState<MenuItem | null>(null);

    // Состояния для создания нового места
    const [newRestaurantName, setNewRestaurantName] = useState('');

    // Состояние для фильтрации блюд по категории
    const [selectedCategoryFilter, setSelectedCategoryFilter] = useState<string | number>('Все');

    // Состояния для ошибок валидации
    const [newRestaurantNameError, setNewRestaurantNameError] = useState('');
    const [newMenuItemErrors, setNewMenuItemErrors] = useState({
        name: '',
        categoryId: '',
        price: '',
    });
    const [editedMenuItemErrors, setEditedMenuItemErrors] = useState({
        name: '',
        categoryId: '',
        price: '',
    });
    const [newCategoryNameError, setNewCategoryNameError] = useState('');
    const [editingCategoryNameError, setEditingCategoryNameError] = useState('');

    // Обработчики для создания нового места
    const handleCreateVenue = () => {
        if (!newRestaurantName.trim()) {
            setNewRestaurantNameError('Пожалуйста, укажите название ресторана.');
            return;
        } else {
            setNewRestaurantNameError('');
        }

        const newVenue: Venue = {
            id: Date.now(),
            restaurantName: newRestaurantName,
            menuItems: [],
            categories: [],
        };

        setVenues([...venues, newVenue]);

        // Сброс формы
        setNewRestaurantName('');
    };

    // Обработчики для модального окна редактирования меню
    const openModal = (venue: Venue) => {
        setSelectedVenue(venue);
        setIsModalOpen(true);
        setSelectedCategoryFilter('Все');
        setNewMenuItemErrors({ name: '', categoryId: '', price: '' });
        setEditedMenuItemErrors({ name: '', categoryId: '', price: '' });
    };

    const closeModal = () => {
        setSelectedVenue(null);
        setIsModalOpen(false);
        setNewMenuItem({ id: 0, name: '', categoryId: 0, price: 0, photo: null });
        setEditingMenuItemId(null);
        setEditedMenuItem(null);
        setNewMenuItemErrors({ name: '', categoryId: '', price: '' });
        setEditedMenuItemErrors({ name: '', categoryId: '', price: '' });
    };

    // Обработчик для добавления нового блюда
    const handleAddMenuItem = () => {
        if (selectedVenue) {
            const errors = { name: '', categoryId: '', price: '' };

            if (!newMenuItem.name.trim()) {
                errors.name = 'Пожалуйста, укажите название блюда.';
            }

            if (!newMenuItem.categoryId) {
                errors.categoryId = 'Пожалуйста, выберите категорию.';
            }

            if (newMenuItem.price <= 0) {
                errors.price = 'Пожалуйста, укажите цену больше 0.';
            }

            if (errors.name || errors.categoryId || errors.price) {
                setNewMenuItemErrors(errors);
                return;
            } else {
                setNewMenuItemErrors({ name: '', categoryId: '', price: '' });
            }

            const updatedMenuItems = [
                ...selectedVenue.menuItems,
                { ...newMenuItem, id: Date.now() },
            ];
            const updatedVenue = { ...selectedVenue, menuItems: updatedMenuItems };
            const updatedVenues = venues.map((venue) =>
                venue.id === selectedVenue.id ? updatedVenue : venue
            );
            setVenues(updatedVenues);
            setSelectedVenue(updatedVenue);
            // Сброс формы
            setNewMenuItem({ id: 0, name: '', categoryId: 0, price: 0, photo: null });
        }
    };

    // Обработчик для удаления блюда
    const handleDeleteMenuItem = (menuItemId: number) => {
        if (selectedVenue) {
            const updatedMenuItems = selectedVenue.menuItems.filter(
                (item) => item.id !== menuItemId
            );
            const updatedVenue = { ...selectedVenue, menuItems: updatedMenuItems };
            const updatedVenues = venues.map((venue) =>
                venue.id === selectedVenue.id ? updatedVenue : venue
            );
            setVenues(updatedVenues);
            setSelectedVenue(updatedVenue);
        }
    };

    // Обработчики для редактирования блюда
    const handleEditMenuItem = (menuItem: MenuItem) => {
        setEditingMenuItemId(menuItem.id);
        setEditedMenuItem({ ...menuItem });
        setEditedMenuItemErrors({ name: '', categoryId: '', price: '' });
    };

    const handleSaveEditedMenuItem = () => {
        if (selectedVenue && editedMenuItem) {
            const errors = { name: '', categoryId: '', price: '' };

            if (!editedMenuItem.name.trim()) {
                errors.name = 'Пожалуйста, укажите название блюда.';
            }

            if (!editedMenuItem.categoryId) {
                errors.categoryId = 'Пожалуйста, выберите категорию.';
            }

            if (editedMenuItem.price <= 0) {
                errors.price = 'Пожалуйста, укажите цену больше 0.';
            }

            if (errors.name || errors.categoryId || errors.price) {
                setEditedMenuItemErrors(errors);
                return;
            } else {
                setEditedMenuItemErrors({ name: '', categoryId: '', price: '' });
            }

            const updatedMenuItems = selectedVenue.menuItems.map((item) =>
                item.id === editedMenuItem.id ? editedMenuItem : item
            );
            const updatedVenue = { ...selectedVenue, menuItems: updatedMenuItems };
            const updatedVenues = venues.map((venue) =>
                venue.id === selectedVenue.id ? updatedVenue : venue
            );
            setVenues(updatedVenues);
            setSelectedVenue(updatedVenue);
            setEditingMenuItemId(null);
            setEditedMenuItem(null);
        }
    };

    // Обработчики для модального окна редактирования категорий
    const openCategoryModal = () => {
        if (selectedVenue) {
            setLocalCategories([...selectedVenue.categories]);
        }
        setIsCategoryModalOpen(true);
        setEditingCategoryId(null);
        setEditingCategoryName('');
        setNewCategoryName('');
        setNewCategoryNameError('');
        setEditingCategoryNameError('');
    };

    const closeCategoryModal = () => {
        // Применяем изменения к selectedVenue
        if (selectedVenue) {
            // Обновляем список категорий
            const updatedVenue = {
                ...selectedVenue,
                categories: localCategories,
            };
            // Удаляем блюда, связанные с удаленными категориями
            const validCategoryIds = new Set(localCategories.map((cat) => cat.id));
            const updatedMenuItems = updatedVenue.menuItems.filter((item) =>
                validCategoryIds.has(item.categoryId)
            );
            updatedVenue.menuItems = updatedMenuItems;
            // Обновляем состояния
            setSelectedVenue(updatedVenue);
            const updatedVenues = venues.map((venue) =>
                venue.id === selectedVenue.id ? updatedVenue : venue
            );
            setVenues(updatedVenues);
        }
        setIsCategoryModalOpen(false);
    };

    const cancelCategoryModal = () => {
        setIsCategoryModalOpen(false);
        setEditingCategoryId(null);
        setEditingCategoryName('');
        setNewCategoryName('');
        setNewCategoryNameError('');
        setEditingCategoryNameError('');
    };

    const handleAddCategory = () => {
        const trimmedCategory = newCategoryName.trim();
        if (!trimmedCategory) {
            setNewCategoryNameError('Пожалуйста, укажите название категории.');
            return;
        }
        if (localCategories.some((category) => category.name === trimmedCategory)) {
            setNewCategoryNameError('Такая категория уже существует.');
            return;
        }
        setNewCategoryNameError('');
        const newCategory: Category = {
            id: Date.now(),
            name: trimmedCategory,
        };
        setLocalCategories([...localCategories, newCategory]);
        setNewCategoryName('');
    };

    const handleDeleteCategory = (categoryId: number) => {
        const updatedCategories = localCategories.filter(
            (category) => category.id !== categoryId
        );
        setLocalCategories(updatedCategories);
    };

    const handleSaveEditedCategory = (categoryId: number) => {
        const trimmedName = editingCategoryName.trim();
        if (!trimmedName) {
            setEditingCategoryNameError('Название категории не может быть пустым.');
            return;
        }
        if (
            localCategories.some(
                (category) => category.name === trimmedName && category.id !== categoryId
            )
        ) {
            setEditingCategoryNameError('Категория с таким названием уже существует.');
            return;
        }
        setEditingCategoryNameError('');
        const updatedCategories = localCategories.map((category) =>
            category.id === categoryId ? { ...category, name: trimmedName } : category
        );
        setLocalCategories(updatedCategories);
        setEditingCategoryId(null);
        setEditingCategoryName('');
    };

    // Обработчик для загрузки меню файлом
    const handleFileMenuUpload = (e: ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0] && selectedVenue) {
            const file = e.target.files[0];
            // Здесь можно добавить логику парсинга файла
            // Для примера добавим два блюда
            const parsedMenuItems: MenuItem[] = [
                {
                    id: Date.now(),
                    name: 'Новое блюдо 1',
                    categoryId: selectedVenue.categories[0]?.id || 0,
                    price: 10,
                },
                {
                    id: Date.now() + 1,
                    name: 'Новое блюдо 2',
                    categoryId: selectedVenue.categories[1]?.id || 0,
                    price: 20,
                },
            ];
            const updatedMenuItems = [...selectedVenue.menuItems, ...parsedMenuItems];
            const updatedVenue = { ...selectedVenue, menuItems: updatedMenuItems };
            const updatedVenues = venues.map((venue) =>
                venue.id === selectedVenue.id ? updatedVenue : venue
            );
            setVenues(updatedVenues);
            setSelectedVenue(updatedVenue);
        }
    };

    // Фильтрация блюд по категории
    const filteredMenuItems = selectedVenue
        ? selectedCategoryFilter === 'Все'
            ? selectedVenue.menuItems
            : selectedVenue.menuItems.filter(
                  (item) => item.categoryId === Number(selectedCategoryFilter)
              )
        : [];

    const currentMenuItem =
        editingMenuItemId && editedMenuItem ? editedMenuItem : newMenuItem;
    const currentMenuItemErrors =
        editingMenuItemId && editedMenuItem ? editedMenuItemErrors : newMenuItemErrors;

    return (
        <div className="bg-[#FAF3DD] text-black p-6 rounded-lg shadow-lg text-center py-20">
            {/* Форма для создания нового места */}
            <div className="flex flex-col space-y-4 mb-8 w-2/3 mx-auto">
                <h3 className="text-xl font-semibold">Добавить новое место проведения</h3>
                <div className="flex flex-col">
                    <div className="flex items-center">
                        <input
                            type="text"
                            placeholder="Название ресторана"
                            value={newRestaurantName}
                            onChange={(e) => setNewRestaurantName(e.target.value)}
                            className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                newRestaurantNameError ? 'border-red-500' : ''
                            }`}
                        />
                        <button
                            className="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 transition-colors duration-200 ml-4 flex items-center"
                            onClick={handleCreateVenue}
                        >
                            <PlusIcon className="h-5 w-5" />
                        </button>
                    </div>
                    {newRestaurantNameError && (
                        <p className="text-red-500 text-sm mt-1">{newRestaurantNameError}</p>
                    )}
                </div>
            </div>

            {/* Список существующих мест */}
            <div className="w-2/3 mx-auto">
                <h3 className="text-xl font-semibold mb-4">Список мест проведения</h3>
                {venues.length === 0 ? (
                    <p>Нет доступных мест проведения.</p>
                ) : (
                    <ul className="space-y-2">
                        {venues.map((venue) => (
                            <li
                                key={venue.id}
                                className="flex justify-between items-center p-4 bg-white rounded shadow cursor-pointer hover:bg-gray-100"
                                onClick={() => openModal(venue)}
                            >
                                <span className="font-medium">{venue.restaurantName}</span>
                                <span className="text-sm text-gray-500">
                                    {venue.menuItems.length} блюд
                                </span>
                            </li>
                        ))}
                    </ul>
                )}
            </div>

            {/* Модальное окно для редактирования меню места */}
            {isModalOpen && selectedVenue && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-30 z-50">
                    <div className="bg-[#FFF8E1] rounded-lg w-2/4 p-6 relative shadow-lg overflow-y-auto max-h-screen py-20 px-[100px]">
                        {/* Кнопка закрытия модального окна */}
                        <button
                            className="absolute top-4 right-4 text-gray-600 hover:text-gray-800"
                            onClick={closeModal}
                            aria-label="Закрыть"
                        >
                            {/* Иконка крестика */}
                            <XIcon className="h-6 w-6" />
                        </button>
                        <h3 className="text-2xl font-semibold mb-6 text-center">
                            Редактирование меню: {selectedVenue.restaurantName}
                        </h3>

                        {/* Селект выбора категории и кнопка редактирования категорий */}
                        <div className="mb-6 flex items-center">
                            <select
                                value={selectedCategoryFilter}
                                onChange={(e) => setSelectedCategoryFilter(e.target.value)}
                                className="p-2 rounded border focus:outline-none focus:ring-2 focus:ring-[#D4A373]"
                            >
                                <option value="Все">Все категории</option>
                                {selectedVenue.categories.map((category) => (
                                    <option key={category.id} value={category.id}>
                                        {category.name}
                                    </option>
                                ))}
                            </select>
                            <button
                                className="ml-4 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors duration-200 flex items-center"
                                onClick={openCategoryModal}
                            >
                                <PencilAltIcon className="h-5 w-5 mr-1" />
                                Редактировать категории
                            </button>
                        </div>

                        {/* Кнопка для загрузки меню файлом */}
                        <div className="mb-6 flex justify-end">
                            <label className="flex items-center space-x-2 bg-[#D4A373] text-white py-2 px-4 rounded hover:bg-[#c99b6d] transition-colors duration-200 cursor-pointer">
                                {/* Иконка загрузки файла */}
                                <UploadIcon className="h-5 w-5" />
                                <span>Добавить меню файлом</span>
                                <input
                                    type="file"
                                    accept=".xlsx,.xls,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel"
                                    onChange={handleFileMenuUpload}
                                    className="hidden"
                                />
                            </label>
                        </div>

                        <div className="flex flex-col lg:flex-row space-y-6 lg:space-y-0 lg:space-x-6">
                            {/* Список блюд */}
                            <div className="flex-1">
                                <h4 className="text-xl font-semibold mb-4">Список блюд</h4>
                                {filteredMenuItems.length === 0 ? (
                                    <p>Блюда не добавлены.</p>
                                ) : (
                                    <div className="space-y-4">
                                        {filteredMenuItems.map((item) => (
                                            <div
                                                key={item.id}
                                                className="flex items-center justify-between p-4 bg-white rounded shadow"
                                            >
                                                <div>
                                                    <p className="font-medium">{item.name}</p>
                                                    <p className="text-sm text-gray-600">
                                                        {selectedVenue.categories.find(
                                                            (cat) => cat.id === item.categoryId
                                                        )?.name}{' '}
                                                        — ${item.price}
                                                    </p>
                                                </div>
                                                <div className="flex items-center space-x-2">
                                                    <button
                                                        className="text-blue-500 hover:text-blue-700"
                                                        onClick={() => handleEditMenuItem(item)}
                                                    >
                                                        {/* Иконка редактирования */}
                                                        <PencilAltIcon className="h-5 w-5" />
                                                    </button>
                                                    <button
                                                        className="text-red-500 hover:text-red-700"
                                                        onClick={() => handleDeleteMenuItem(item.id)}
                                                    >
                                                        {/* Иконка удаления */}
                                                        <TrashIcon className="h-5 w-5" />
                                                    </button>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>

                            {/* Форма для добавления нового блюда */}
                            <div className="flex-1">
                                <h4 className="text-xl font-semibold mb-4">
                                    {editingMenuItemId
                                        ? 'Редактировать блюдо'
                                        : 'Добавить новое блюдо'}
                                </h4>
                                <div className="space-y-4">
                                    <input
                                        type="text"
                                        placeholder="Название блюда"
                                        value={currentMenuItem.name}
                                        onChange={(e) => {
                                            const name = e.target.value;
                                            if (editingMenuItemId && editedMenuItem) {
                                                setEditedMenuItem({
                                                    ...editedMenuItem,
                                                    name,
                                                });
                                            } else {
                                                setNewMenuItem({
                                                    ...newMenuItem,
                                                    name,
                                                });
                                            }
                                        }}
                                        className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                            currentMenuItemErrors.name ? 'border-red-500' : ''
                                        }`}
                                    />
                                    {currentMenuItemErrors.name && (
                                        <p className="text-red-500 text-sm mt-1">
                                            {currentMenuItemErrors.name}
                                        </p>
                                    )}
                                    <div className="flex items-center space-x-2">
                                        <select
                                            value={currentMenuItem.categoryId || ''}
                                            onChange={(e) => {
                                                const categoryId = Number(e.target.value);
                                                if (editingMenuItemId && editedMenuItem) {
                                                    setEditedMenuItem({
                                                        ...editedMenuItem,
                                                        categoryId,
                                                    });
                                                } else {
                                                    setNewMenuItem({
                                                        ...newMenuItem,
                                                        categoryId,
                                                    });
                                                }
                                            }}
                                            className={`p-2 rounded border flex-1 focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                                currentMenuItemErrors.categoryId
                                                    ? 'border-red-500'
                                                    : ''
                                            }`}
                                        >
                                            <option value="">Выберите категорию</option>
                                            {selectedVenue.categories.map((category) => (
                                                <option key={category.id} value={category.id}>
                                                    {category.name}
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                    {currentMenuItemErrors.categoryId && (
                                        <p className="text-red-500 text-sm mt-1">
                                            {currentMenuItemErrors.categoryId}
                                        </p>
                                    )}
                                    <input
                                        type="number"
                                        placeholder="Цена"
                                        value={currentMenuItem.price}
                                        onChange={(e) => {
                                            const price = Number(e.target.value);
                                            if (editingMenuItemId && editedMenuItem) {
                                                setEditedMenuItem({
                                                    ...editedMenuItem,
                                                    price,
                                                });
                                            } else {
                                                setNewMenuItem({
                                                    ...newMenuItem,
                                                    price,
                                                });
                                            }
                                        }}
                                        className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                            currentMenuItemErrors.price ? 'border-red-500' : ''
                                        }`}
                                    />
                                    {currentMenuItemErrors.price && (
                                        <p className="text-red-500 text-sm mt-1">
                                            {currentMenuItemErrors.price}
                                        </p>
                                    )}
                                    <label className="flex items-center space-x-2 cursor-pointer">
                                        {/* Иконка загрузки фото */}
                                        <UploadIcon className="h-6 w-6 text-gray-600" />
                                        <span className="text-gray-600">
                                            {currentMenuItem.photo
                                                ? currentMenuItem.photo.name
                                                : 'Добавить фото'}
                                        </span>
                                        <input
                                            type="file"
                                            accept="image/*"
                                            onChange={(e) => {
                                                if (e.target.files && e.target.files[0]) {
                                                    if (editingMenuItemId && editedMenuItem) {
                                                        setEditedMenuItem({
                                                            ...editedMenuItem,
                                                            photo: e.target.files[0],
                                                        });
                                                    } else {
                                                        setNewMenuItem({
                                                            ...newMenuItem,
                                                            photo: e.target.files[0],
                                                        });
                                                    }
                                                }
                                            }}
                                            className="hidden"
                                        />
                                    </label>

                                    {editingMenuItemId ? (
                                        <div className="flex space-x-2">
                                            <button
                                                className="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 transition-colors duration-200 flex items-center"
                                                onClick={handleSaveEditedMenuItem}
                                            >
                                                <PencilAltIcon className="h-5 w-5 mr-1" />
                                                Сохранить изменения
                                            </button>
                                            <button
                                                className="bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600 transition-colors duration-200 flex items-center"
                                                onClick={() => {
                                                    setEditingMenuItemId(null);
                                                    setEditedMenuItem(null);
                                                    setEditedMenuItemErrors({
                                                        name: '',
                                                        categoryId: '',
                                                        price: '',
                                                    });
                                                }}
                                            >
                                                <XIcon className="h-5 w-5 mr-1" />
                                                Отмена
                                            </button>
                                        </div>
                                    ) : (
                                        <button
                                            className="bg-[#D4A373] text-white py-2 px-4 rounded hover:bg-[#c99b6d] transition-colors duration-200 flex items-center"
                                            onClick={handleAddMenuItem}
                                        >
                                            <PlusIcon className="h-5 w-5 mr-1" />
                                            Добавить блюдо
                                        </button>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* Модальное окно для редактирования категорий */}
            {isCategoryModalOpen && selectedVenue && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-30 z-50">
                    <div className="bg-[#FFF8E1] rounded-lg w-11/12 md:w-1/2 p-6 relative shadow-lg">
                        {/* Кнопка закрытия модального окна */}
                        <button
                            className="absolute top-4 right-4 text-gray-600 hover:text-gray-800"
                            onClick={cancelCategoryModal}
                            aria-label="Закрыть"
                        >
                            {/* Иконка крестика */}
                            <XIcon className="h-6 w-6" />
                        </button>
                        <h3 className="text-2xl font-semibold mb-4 text-center">Категории</h3>

                        {/* Форма для добавления новой категории */}
                        <h4 className="text-xl font-semibold mb-4">Добавить новую категорию</h4>
                        <div className="flex flex-col mb-4">
                            <div className="flex space-x-2">
                                <input
                                    type="text"
                                    placeholder="Название категории"
                                    value={newCategoryName}
                                    onChange={(e) => setNewCategoryName(e.target.value)}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        newCategoryNameError ? 'border-red-500' : ''
                                    }`}
                                />
                                <button
                                    className="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors duration-200 flex items-center"
                                    onClick={handleAddCategory}
                                >
                                    <PlusIcon className="h-5 w-5 mr-1" />
                                    Добавить
                                </button>
                            </div>
                            {newCategoryNameError && (
                                <p className="text-red-500 text-sm mt-1">{newCategoryNameError}</p>
                            )}
                        </div>

                        {/* Список категорий */}
                        <h4 className="text-xl font-semibold mb-4">Список категорий</h4>
                        {localCategories.length === 0 ? (
                            <p>Категории не добавлены.</p>
                        ) : (
                            <ul className="space-y-2">
                                {localCategories.map((category) => (
                                    <li
                                        key={category.id}
                                        className="flex items-center justify-between"
                                    >
                                        {editingCategoryId === category.id ? (
                                            <div className="flex items-center w-full">
                                                <input
                                                    type="text"
                                                    value={editingCategoryName}
                                                    onChange={(e) =>
                                                        setEditingCategoryName(e.target.value)
                                                    }
                                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                                        editingCategoryNameError
                                                            ? 'border-red-500'
                                                            : ''
                                                    }`}
                                                />
                                                <button
                                                    className="text-green-500 hover:text-green-700 ml-2"
                                                    onClick={() =>
                                                        handleSaveEditedCategory(category.id)
                                                    }
                                                >
                                                    <CheckIcon className="h-5 w-5" />
                                                </button>
                                                <button
                                                    className="text-gray-500 hover:text-gray-700 ml-2"
                                                    onClick={() => {
                                                        setEditingCategoryId(null);
                                                        setEditingCategoryName('');
                                                        setEditingCategoryNameError('');
                                                    }}
                                                >
                                                    <XIcon className="h-5 w-5" />
                                                </button>
                                            </div>
                                        ) : (
                                            <>
                                                <span>{category.name}</span>
                                                <div className="flex items-center">
                                                    <button
                                                        className="text-blue-500 hover:text-blue-700 ml-2"
                                                        onClick={() => {
                                                            setEditingCategoryId(category.id);
                                                            setEditingCategoryName(category.name);
                                                            setEditingCategoryNameError('');
                                                        }}
                                                    >
                                                        <PencilAltIcon className="h-5 w-5" />
                                                    </button>
                                                    <button
                                                        className="text-red-500 hover:text-red-700 ml-2"
                                                        onClick={() =>
                                                            handleDeleteCategory(category.id)
                                                        }
                                                    >
                                                        <TrashIcon className="h-5 w-5" />
                                                    </button>
                                                </div>
                                            </>
                                        )}
                                    </li>
                                ))}
                            </ul>
                        )}
                        {editingCategoryNameError && (
                            <p className="text-red-500 text-sm mt-1">
                                {editingCategoryNameError}
                            </p>
                        )}
                        {/* Кнопки сохранения и отмены */}
                        <div className="mt-6 text-center">
                            <button
                                className="bg-green-500 text-white py-2 px-6 rounded hover:bg-green-600 transition-colors duration-200 mr-4"
                                onClick={closeCategoryModal}
                            >
                                Сохранить
                            </button>
                            <button
                                className="bg-gray-500 text-white py-2 px-6 rounded hover:bg-gray-600 transition-colors duration-200"
                                onClick={cancelCategoryModal}
                            >
                                Отмена
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default CreateVenue;


File: LotteryTab.tsx

"use client";
import React, { useState } from 'react';
import Modal from './Modal';

interface Participant {
    id: number;
    name: string;
    phone: string;
    team: string;
    tableNumber: number;
}

const LotteryTab: React.FC = () => {
    const [participants, setParticipants] = useState<Participant[]>([
        { id: 1, name: 'Иван Иванов', phone: '+71234567890', team: 'Команда А', tableNumber: 101 },
        { id: 2, name: 'Мария Петрова', phone: '+71234567891', team: 'Команда Б', tableNumber: 102 },
        // Добавьте больше тестовых данных
    ]);

    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const [winner, setWinner] = useState<Participant | null>(null);

    const addParticipant = (participant: Participant) => {
        setParticipants([...participants, participant]);
    };

    const selectWinner = () => {
        if (participants.length === 0) return;
        const randomIndex = Math.floor(Math.random() * participants.length);
        setWinner(participants[randomIndex]);
        setIsModalOpen(true);
    };

    return (
        <div className="bg-[#FAF3DD] text-black p-6 rounded-lg shadow-lg p-20">
            <h2 className="text-2xl font-bold mb-4">Лотерея</h2>
            <div className="flex justify-start mb-4 mb-15">
                <button
                    className="bg-[#c99b6d] text-white py-2 px-4 rounded hover:bg-[#691d2d] transition-colors duration-200"
                    onClick={selectWinner}
                >
                    Выбрать победителя
                </button>
            </div>
            <table className="min-w-full bg-white rounded-lg overflow-hidden">
                <thead>
                    <tr>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Имя</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Телефон</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Команда</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Номер стола</th>
                    </tr>
                </thead>
                <tbody>
                    {participants.map((participant, index) => (
                        <tr
                            key={participant.id}
                            className={`${
                                index % 2 === 0 ? 'bg-white' : 'bg-[#FFF5E1]'
                            } hover:bg-gray-200 transition-colors duration-200`}
                        >
                            <td className="border px-4 py-3 text-center">{participant.name}</td>
                            <td className="border px-4 py-3 text-center">{participant.phone}</td>
                            <td className="border px-4 py-3 text-center">{participant.team}</td>
                            <td className="border px-4 py-3 text-center">{participant.tableNumber}</td>
                        </tr>
                    ))}
                </tbody>
            </table>

            {/* Модальное окно для отображения победителя */}
            {isModalOpen && winner && (
                <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
                    <h2 className="text-2xl font-bold mb-4 text-center mt-20 mx-20">Поздравляем победителя!</h2>
                    <p className="text-center text-lg mb-4">Команда: {winner.team}</p>
                    <p className="text-center text-lg mb-4">Стол: {winner.tableNumber}</p>
                    <p className="text-center text-lg mb-4">Имя: {winner.name}</p>
                    <button
                        className="bg-green text-white py-2 px-4 rounded hover:bg-[#c99b6d] transition-colors duration-200 mx-auto block mb-20"
                        onClick={() => setIsModalOpen(false)}
                    >
                        Закрыть
                    </button>
                </Modal>
            )}
        </div>
    );
};

export default LotteryTab;


File: Modal.tsx

"use client";
import React from 'react';

interface ModalProps {
    isOpen: boolean;
    onClose: () => void;
    children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {
    if (!isOpen) return null;

    return (
        <div className="modal fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-white rounded-2xl p-6 relative">
                <button className="absolute top-4 right-4 text-2xl text-[#d2a636]" onClick={onClose}>
                    &times;
                </button>
                {children}
            </div>
        </div>
    );
};

export default Modal;


File: PaymentsTab.tsx
"use client";
import React, { useState } from 'react';

interface Payment {
    id: number;
    tabletNumber: number;
    tableNumber: number;
    teamName: string;
    plannedParticipants: number;
    actualParticipants: number;
    paymentMethod: string;
    previouslyPaid: number;
    additionalPayment: number;
    isFullyPaid: boolean;
}

const PaymentsTab: React.FC = () => {
    const [payments, setPayments] = useState<Payment[]>([
        { id: 1, tabletNumber: 1, tableNumber: 101, teamName: 'Команда А', plannedParticipants: 5, actualParticipants: 4, paymentMethod: 'QR-код', previouslyPaid: 300, additionalPayment: 50, isFullyPaid: false },
        { id: 2, tabletNumber: 2, tableNumber: 102, teamName: 'Команда Б', plannedParticipants: 6, actualParticipants: 6, paymentMethod: 'Карта', previouslyPaid: 600, additionalPayment: 0, isFullyPaid: true },
        // Добавьте больше тестовых данных
    ]);

    // Удаляем состояния, связанные с модальным окном
    // const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    // const [currentPayment, setCurrentPayment] = useState<Payment | null>(null);
    // const [additionalPayment, setAdditionalPayment] = useState<number>(0);

    // Функция для обработки доплаты
    const handleAddPayment = (paymentId: number) => {
        setPayments(prevPayments => prevPayments.map(payment => {
            if (payment.id === paymentId) {
                // Расчет необходимой доплаты
                const totalRequiredPayment = payment.plannedParticipants * 50;
                const totalPaid = payment.previouslyPaid + payment.additionalPayment;
                const neededAdditionalPayment = totalRequiredPayment - totalPaid;

                // Если уже полностью оплачено, ничего не делаем
                if (neededAdditionalPayment <= 0) {
                    return { ...payment, isFullyPaid: true };
                }

                // Обновляем доплату и статус оплаты
                const updatedAdditionalPayment = payment.additionalPayment + neededAdditionalPayment;
                const updatedIsFullyPaid = (payment.previouslyPaid + updatedAdditionalPayment) >= totalRequiredPayment;

                return {
                    ...payment,
                    additionalPayment: updatedAdditionalPayment,
                    isFullyPaid: updatedIsFullyPaid
                };
            }
            return payment;
        }));
    };

    return (
        <div className="bg-[#FAF3DD] text-black p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold mb-4 ml-2 mt-10">Оплаты</h2>
            {/* Обернем таблицу в контейнер с горизонтальной прокруткой */}
            <div className="overflow-x-auto">
                <table className="min-w-full bg-white rounded-lg overflow-hidden">
                    <thead>
                        <tr>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Номер планшета</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Номер стола</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Название команды</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Запланировано</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Фактически</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Способ оплаты</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Оплачено ранее</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Доплата</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Статус</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        {payments.map((payment, index) => (
                            <tr
                                key={payment.id}
                                className={`${
                                    index % 2 === 0 ? 'bg-white' : 'bg-[#FFF5E1]'
                                } hover:bg-gray-200 transition-colors duration-200`}
                            >
                                <td className="border px-4 py-3 text-center">{payment.tabletNumber}</td>
                                <td className="border px-4 py-3 text-center">{payment.tableNumber}</td>
                                <td className="border px-4 py-3 text-center">{payment.teamName}</td>
                                <td className="border px-4 py-3 text-center">{payment.plannedParticipants}</td>
                                <td className="border px-4 py-3 text-center">{payment.actualParticipants}</td>
                                <td className="border px-4 py-3 text-center">{payment.paymentMethod}</td>
                                <td className="border px-4 py-3 text-center">{payment.previouslyPaid} ₽</td>
                                <td className="border px-4 py-3 text-center">{payment.additionalPayment} ₽</td>
                                <td className="border px-4 py-3 text-center">
                                    {payment.isFullyPaid ? (
                                        <span className="text-green-600 font-bold">Полностью оплачено</span>
                                    ) : (
                                        <span className="text-red-600 font-bold">Требуется доплата</span>
                                    )}
                                </td>
                                <td className="border px-4 py-3 text-center">
                                    {!payment.isFullyPaid && (
                                        <button
                                            className="bg-[#D4A373] text-white px-3 py-1 rounded hover:bg-[#c99b6d] transition-colors duration-200"
                                            onClick={() => handleAddPayment(payment.id)}
                                        >
                                            Добавить доплату
                                        </button>
                                    )}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );


}
export default PaymentsTab;

File: ReturnButton.tsx

"use client";
import React from 'react';
import { useRouter } from 'next/navigation';
import { FaHome } from 'react-icons/fa';

const ReturnButton: React.FC = () => {
    const router = useRouter();

    return (
        <button
            className="flex justify-center items-center w-16 h-16 bg-[#14213D] rounded-full cursor-pointer hover:bg-[#1b2a49] transition-colors duration-200"
            onClick={() => router.push('/')}
        >
            <FaHome className="text-[#D4A373] text-3xl" />
        </button>
    );
};

export default ReturnButton;


File: RolesTab.tsx
"use client";
import React, { useState } from 'react';
import Modal from './Modal';
import {
    XIcon,
    PlusIcon,
    PencilAltIcon,
    TrashIcon,
    CheckIcon,
} from '@heroicons/react/outline'; // Ensure you have these icons installed

interface Role {
    id: number;
    name: string;
    permissions: string[];
}

const RolesTab: React.FC = () => {
    const [roles, setRoles] = useState<Role[]>([
        { id: 1, name: 'Администратор', permissions: ['Все права'] },
        { id: 2, name: 'Кассир', permissions: ['Приём оплаты', 'Проверка оплаты'] },
        { id: 3, name: 'Официант', permissions: ['Получение вызовов'] },
    ]);

    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const [currentRole, setCurrentRole] = useState<Role | null>(null);
    const [newRole, setNewRole] = useState<Role>({
        id: roles.length + 1,
        name: '',
        permissions: []
    });

    // States for validation errors
    const [errors, setErrors] = useState({
        name: '',
        permissions: '',
    });

    const openEditModal = (role: Role) => {
        setCurrentRole(role);
        setErrors({
            name: '',
            permissions: '',
        });
        setIsModalOpen(true);
    };

    const openAddModal = () => {
        setCurrentRole(null);
        setNewRole({
            id: roles.length + 1,
            name: '',
            permissions: []
        });
        setErrors({
            name: '',
            permissions: '',
        });
        setIsModalOpen(true);
    };

    const handleSave = () => {
        const roleToSave = currentRole ? currentRole : newRole;

        // Validation
        const newErrors = {
            name: '',
            permissions: '',
        };
        let isValid = true;

        if (!roleToSave.name.trim()) {
            newErrors.name = 'Пожалуйста, укажите название роли.';
            isValid = false;
        }

        if (roleToSave.permissions.length === 0) {
            newErrors.permissions = 'Пожалуйста, выберите хотя бы одно право.';
            isValid = false;
        }

        setErrors(newErrors);

        if (!isValid) {
            return;
        }

        if (currentRole) {
            // Update existing role
            setRoles(roles.map(role => role.id === currentRole.id ? roleToSave : role));
        } else {
            // Add new role
            setRoles([...roles, roleToSave]);
        }
        setIsModalOpen(false);
    };

    const togglePermission = (permission: string) => {
        if (currentRole) {
            const hasPermission = currentRole.permissions.includes(permission);
            const updatedPermissions = hasPermission
                ? currentRole.permissions.filter(p => p !== permission)
                : [...currentRole.permissions, permission];
            setCurrentRole({ ...currentRole, permissions: updatedPermissions });
        } else {
            const hasPermission = newRole.permissions.includes(permission);
            const updatedPermissions = hasPermission
                ? newRole.permissions.filter(p => p !== permission)
                : [...newRole.permissions, permission];
            setNewRole({ ...newRole, permissions: updatedPermissions });
        }
    };

    const allPermissions = ['Все права', 'Приём оплаты', 'Проверка оплаты', 'Получение вызовов'];

    // Handler to delete a role
    const handleDeleteRole = (roleId: number) => {
        if (confirm('Вы уверены, что хотите удалить эту роль?')) {
            setRoles(roles.filter(role => role.id !== roleId));
        }
    };

    return (
        <div className="bg-[#FAF3DD] text-black rounded-lg shadow-lg p-20">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold">Роли</h2>
                <button
                    className="bg-[#D4A373] text-white py-2 px-4 rounded hover:bg-[#c99b6d] transition-colors duration-200 flex items-center"
                    onClick={openAddModal}
                >
                    <PlusIcon className="h-5 w-5 mr-2" />
                    Добавить роль
                </button>
            </div>
            <div className="overflow-x-auto">
                <table className="min-w-full bg-white rounded-lg overflow-hidden">
                    <thead>
                        <tr>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Роль</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Права</th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        {roles.map((role, index) => (
                            <tr
                                key={role.id}
                                className={`${
                                    index % 2 === 0 ? 'bg-white' : 'bg-[#FFF5E1]'
                                } hover:bg-gray-200 transition-colors duration-200`}
                            >
                                <td className="border px-4 py-3 text-center">{role.name}</td>
                                <td className="border px-4 py-3 text-center">{role.permissions.join(', ')}</td>
                                <td className="border px-4 py-3 text-center">
                                    <div className="flex justify-center space-x-2">
                                        {/* Edit Button */}
                                        <button
                                            onClick={() => openEditModal(role)}
                                            className="text-blue-500 hover:text-blue-700 p-2 rounded transition-colors duration-200"
                                            aria-label="Редактировать"
                                            title="Редактировать"
                                        >
                                            <PencilAltIcon className="h-5 w-5" />
                                        </button>

                                        {/* Delete Button */}
                                        <button
                                            onClick={() => handleDeleteRole(role.id)}
                                            className="text-red-500 hover:text-red-700 p-2 rounded transition-colors duration-200"
                                            aria-label="Удалить"
                                            title="Удалить"
                                        >
                                            <TrashIcon className="h-5 w-5" />
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

            {/* Модальное окно для добавления/редактирования роли */}
            {isModalOpen && (
                <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
                    <div className="m-20">
                        <h2 className="text-2xl font-bold mb-4 text-center w-[500px]">
                            {currentRole ? 'Редактирование роли' : 'Добавление роли'}
                        </h2>
                        <div className="flex flex-col space-y-4">
                            {/* Название роли */}
                            <div className="flex flex-col">
                                <input
                                    type="text"
                                    placeholder="Название роли"
                                    value={currentRole ? currentRole.name : newRole.name}
                                    onChange={(e) => {
                                        if (currentRole) {
                                            setCurrentRole({ ...currentRole, name: e.target.value });
                                        } else {
                                            setNewRole({ ...newRole, name: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.name ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.name && (
                                    <p className="text-red-500 text-sm mt-1">{errors.name}</p>
                                )}
                            </div>

                            {/* Права */}
                            <div className="flex flex-col">
                                <span className="font-medium mb-2">Права:</span>
                                <div className="flex flex-wrap gap-2">
                                    {allPermissions.map((permission) => (
                                        <label key={permission} className="flex items-center">
                                            <input
                                                type="checkbox"
                                                checked={
                                                    currentRole
                                                        ? currentRole.permissions.includes(permission)
                                                        : newRole.permissions.includes(permission)
                                                }
                                                onChange={() => togglePermission(permission)}
                                                className="mr-2 h-8 w-8"
                                            />
                                            {permission}
                                        </label>
                                    ))}
                                </div>
                                {errors.permissions && (
                                    <p className="text-red-500 text-sm mt-1">{errors.permissions}</p>
                                )}
                            </div>

                            {/* Кнопка сохранения */}
                            <button
                                className="bg-[#D4A373] text-white py-2 px-4 rounded hover:bg-[#c99b6d] transition-colors duration-200 flex items-center justify-center"
                                onClick={handleSave}
                            >
                                <CheckIcon className="h-5 w-5 mr-2" />
                                {currentRole ? 'Сохранить изменения' : 'Добавить роль'}
                            </button>
                        </div>
                    </div>
                </Modal>
            )}
        </div>
    )};

    export default RolesTab;


File: ScoreCountingTab.tsx
"use client";
import React, { useState } from 'react';
import Modal from './Modal';

interface TeamScore {
    id: number;
    teamName: string;
    round1: number;
    round2: number;
    round3: number;
    round4: number;
    round5: number;
    round6: number;
    round7: number;
    total: number;
}

const ScoreCountingTab: React.FC = () => {
    const [scores, setScores] = useState<TeamScore[]>([
        { id: 1, teamName: 'Команда А', round1: 10, round2: 15, round3: 20, round4: 25, round5: 30, round6: 35, round7: 40, total: 175 },
        { id: 2, teamName: 'Команда Б', round1: 9, round2: 14, round3: 19, round4: 24, round5: 29, round6: 34, round7: 39, total: 168 },
        // Добавьте больше тестовых данных
    ]);

    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const [currentScore, setCurrentScore] = useState<TeamScore | null>(null);

    const openEditModal = (score: TeamScore) => {
        setCurrentScore(score);
        setIsModalOpen(true);
    };

    const handleSave = () => {
        if (currentScore) {
            // Пересчитываем итог, если это необходимо
            const updatedTotal = 
                currentScore.round1 + 
                currentScore.round2 + 
                currentScore.round3 + 
                currentScore.round4 + 
                currentScore.round5 + 
                currentScore.round6 + 
                currentScore.round7;
            setCurrentScore({ ...currentScore, total: updatedTotal });

            setScores(scores.map(score => score.id === currentScore.id ? { ...currentScore, total: updatedTotal } : score));
        }
        setIsModalOpen(false);
    };

    return (
        <div className="bg-[#FAF3DD] text-black p-6 rounded-lg shadow-lg p-20">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold">Подсчёт очков</h2>
                {/* Здесь можно добавить кнопки для завершения игры и возврата назад */}
            </div>
            <table className="min-w-full bg-white rounded-lg overflow-hidden">
                <thead>
                    <tr>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Команда</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Раунд 1</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Раунд 2</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Раунд 3</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Раунд 4</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Раунд 5</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Раунд 6</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Раунд 7</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Итого</th>
                        <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">Действия</th>
                    </tr>
                </thead>
                <tbody>
                    {scores.map((score, index) => (
                        <tr
                            key={score.id}
                            className={`${
                                index % 2 === 0 ? 'bg-white' : 'bg-[#FFF5E1]'
                            } hover:bg-gray-200 transition-colors duration-200`}
                        >
                            <td className="border px-4 py-3 text-center">{score.teamName}</td>
                            <td className="border px-4 py-3 text-center">{score.round1}</td>
                            <td className="border px-4 py-3 text-center">{score.round2}</td>
                            <td className="border px-4 py-3 text-center">{score.round3}</td>
                            <td className="border px-4 py-3 text-center">{score.round4}</td>
                            <td className="border px-4 py-3 text-center">{score.round5}</td>
                            <td className="border px-4 py-3 text-center">{score.round6}</td>
                            <td className="border px-4 py-3 text-center">{score.round7}</td>
                            <td className="border px-4 py-3 text-center">{score.total}</td>
                            <td className="border px-4 py-3 text-center">
                                <button
                                    className="bg-[#D4A373] text-white px-3 py-1 rounded hover:bg-[#c99b6d] transition-colors duration-200"
                                    onClick={() => openEditModal(score)}
                                >
                                    Редактировать
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>

            {/* Модальное окно для редактирования очков */}
            {isModalOpen && currentScore && (
                <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
                    <div className="m-20  mx-[200px] w-[300px]">
                    <h2 className="text-2xl font-bold mb-4 text-center">Редактирование очков</h2>
                    <form className="flex flex-col space-y-4">
                        <div className="flex flex-col">
                            <label htmlFor="round1" className="mb-1">Раунд 1</label>
                            <input
                                id="round1"
                                type="number"
                                value={currentScore.round1}
                                onChange={(e) => setCurrentScore({ ...currentScore, round1: Number(e.target.value) })}
                                className="p-2 rounded border"
                            />
                        </div>
                        <div className="flex flex-col">
                            <label htmlFor="round2" className="mb-1">Раунд 2</label>
                            <input
                                id="round2"
                                type="number"
                                value={currentScore.round2}
                                onChange={(e) => setCurrentScore({ ...currentScore, round2: Number(e.target.value) })}
                                className="p-2 rounded border"
                            />
                        </div>
                        <div className="flex flex-col">
                            <label htmlFor="round3" className="mb-1">Раунд 3</label>
                            <input
                                id="round3"
                                type="number"
                                value={currentScore.round3}
                                onChange={(e) => setCurrentScore({ ...currentScore, round3: Number(e.target.value) })}
                                className="p-2 rounded border"
                            />
                        </div>
                        <div className="flex flex-col">
                            <label htmlFor="round4" className="mb-1">Раунд 4</label>
                            <input
                                id="round4"
                                type="number"
                                value={currentScore.round4}
                                onChange={(e) => setCurrentScore({ ...currentScore, round4: Number(e.target.value) })}
                                className="p-2 rounded border"
                            />
                        </div>
                        <div className="flex flex-col">
                            <label htmlFor="round5" className="mb-1">Раунд 5</label>
                            <input
                                id="round5"
                                type="number"
                                value={currentScore.round5}
                                onChange={(e) => setCurrentScore({ ...currentScore, round5: Number(e.target.value) })}
                                className="p-2 rounded border"
                            />
                        </div>
                        <div className="flex flex-col">
                            <label htmlFor="round6" className="mb-1">Раунд 6</label>
                            <input
                                id="round6"
                                type="number"
                                value={currentScore.round6}
                                onChange={(e) => setCurrentScore({ ...currentScore, round6: Number(e.target.value) })}
                                className="p-2 rounded border"
                            />
                        </div>
                        <div className="flex flex-col">
                            <label htmlFor="round7" className="mb-1">Раунд 7</label>
                            <input
                                id="round7"
                                type="number"
                                value={currentScore.round7}
                                onChange={(e) => setCurrentScore({ ...currentScore, round7: Number(e.target.value) })}
                                className="p-2 rounded border"
                            />
                        </div>
                        <div className="flex flex-col">
                            <label htmlFor="total" className="mb-1">Итого</label>
                            <input
                                id="total"
                                type="number"
                                value={currentScore.total}
                                onChange={(e) => setCurrentScore({ ...currentScore, total: Number(e.target.value) })}
                                className="p-2 rounded border bg-gray-100"
                                disabled
                            />
                        </div>
                        <button
                            type="button"
                            className="bg-[#D4A373] text-white py-2 px-4 rounded hover:bg-[#c99b6d] transition-colors duration-200"
                            onClick={handleSave}
                        >
                            Сохранить
                        </button>
                    </form>
                    </div>
                </Modal>
            )}
        </div>
    );
};

export default ScoreCountingTab;


File: TeamsTab.tsx
"use client";
import React, { useState } from 'react';
import Modal from './Modal';
import { XIcon, PlusIcon, CheckIcon, PencilAltIcon, TrashIcon } from '@heroicons/react/outline';

interface Team {
    id: number;
    tabletNumber: number; // Один номер планшета
    teamName: string;
    tableNumber: number;
    registeredParticipants: number;
    actualParticipants: number;
}

const TeamsTab: React.FC = () => {
    const [teams, setTeams] = useState<Team[]>([
        {
            id: 1,
            tabletNumber: 1,
            teamName: 'Команда А',
            tableNumber: 101,
            registeredParticipants: 5,
            actualParticipants: 4,
        },
        {
            id: 2,
            tabletNumber: 2,
            teamName: 'Команда Б',
            tableNumber: 102,
            registeredParticipants: 6,
            actualParticipants: 6,
        },
        // Добавьте больше тестовых данных при необходимости
    ]);

    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const [currentTeam, setCurrentTeam] = useState<Team | null>(null);
    const [newTeam, setNewTeam] = useState<Team>({
        id: teams.length + 1,
        tabletNumber: 0,
        teamName: '',
        tableNumber: 0,
        registeredParticipants: 0,
        actualParticipants: 0,
    });

    // Состояния для ошибок валидации
    const [errors, setErrors] = useState({
        tabletNumber: '',
        teamName: '',
        tableNumber: '',
        registeredParticipants: '',
        actualParticipants: '',
    });

    const openEditModal = (team: Team) => {
        setCurrentTeam(team);
        setErrors({
            tabletNumber: '',
            teamName: '',
            tableNumber: '',
            registeredParticipants: '',
            actualParticipants: '',
        });
        setIsModalOpen(true);
    };

    const openAddModal = () => {
        setCurrentTeam(null);
        setNewTeam({
            id: teams.length + 1,
            tabletNumber: 0,
            teamName: '',
            tableNumber: 0,
            registeredParticipants: 0,
            actualParticipants: 0,
        });
        setErrors({
            tabletNumber: '',
            teamName: '',
            tableNumber: '',
            registeredParticipants: '',
            actualParticipants: '',
        });
        setIsModalOpen(true);
    };

    const handleSave = () => {
        const teamToSave = currentTeam ? currentTeam : newTeam;

        // Валидация
        const newErrors = {
            tabletNumber: '',
            teamName: '',
            tableNumber: '',
            registeredParticipants: '',
            actualParticipants: '',
        };
        let isValid = true;

        if (teamToSave.tabletNumber <= 0) {
            newErrors.tabletNumber = 'Пожалуйста, укажите корректный номер планшета.';
            isValid = false;
        } else {
            // Проверка на уникальность номера планшета
            const isTabletAssigned = teams.some(
                (team) =>
                    team.tabletNumber === teamToSave.tabletNumber &&
                    team.id !== teamToSave.id
            );
            if (isTabletAssigned) {
                newErrors.tabletNumber = 'Этот номер планшета уже назначен другой команде.';
                isValid = false;
            }
        }

        if (!teamToSave.teamName.trim()) {
            newErrors.teamName = 'Пожалуйста, укажите название команды.';
            isValid = false;
        }

        if (teamToSave.tableNumber <= 0) {
            newErrors.tableNumber = 'Пожалуйста, укажите корректный номер стола.';
            isValid = false;
        }

        if (teamToSave.registeredParticipants <= 0) {
            newErrors.registeredParticipants = 'Пожалуйста, укажите количество зарегистрированных участников.';
            isValid = false;
        }

        if (teamToSave.actualParticipants < 0) {
            newErrors.actualParticipants = 'Количество фактических участников не может быть отрицательным.';
            isValid = false;
        }

        setErrors(newErrors);

        if (!isValid) {
            return;
        }

        if (currentTeam) {
            // Обновить существующую команду
            setTeams(teams.map((team) => (team.id === currentTeam.id ? teamToSave : team)));
        } else {
            // Добавить новую команду
            setTeams([...teams, teamToSave]);
        }
        setIsModalOpen(false);
    };

    const handleDeleteTeam = (teamId: number) => {
        if (confirm('Вы уверены, что хотите удалить эту команду?')) {
            setTeams(teams.filter((team) => team.id !== teamId));
        }
    };

    return (
        <div className="bg-[#FAF3DD] text-black p-20 rounded-lg shadow-lg text-center py-20">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold">Команды</h2>
                <button
                    className="bg-[#D4A373] text-white py-2 px-4 rounded hover:bg-[#c99b6d] transition-colors duration-200 flex items-center"
                    onClick={openAddModal}
                >
                    <PlusIcon className="h-5 w-5 mr-2" />
                    Добавить команду
                </button>
            </div>
            <div className="overflow-x-auto">
                <table className="min-w-full bg-white rounded-lg overflow-hidden">
                    <thead>
                        <tr>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">
                                Номер планшета
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">
                                Название команды
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">
                                Номер стола
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">
                                Зарегистрировано
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">
                                Фактически
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-lg font-semibold">
                                Действия
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        {teams.map((team, index) => (
                            <tr
                                key={team.id}
                                className={`${
                                    index % 2 === 0 ? 'bg-white' : 'bg-[#FFF5E1]'
                                } hover:bg-gray-200 transition-colors duration-200`}
                            >
                                <td className="border px-4 py-3 text-center">
                                    {team.tabletNumber}
                                </td>
                                <td className="border px-4 py-3 text-center">{team.teamName}</td>
                                <td className="border px-4 py-3 text-center">{team.tableNumber}</td>
                                <td className="border px-4 py-3 text-center">
                                    {team.registeredParticipants}
                                </td>
                                <td className="border px-4 py-3 text-center">
                                    {team.actualParticipants}
                                </td>
                                <td className="border px-4 py-3 flex">
                                    <button
                                        className="text-blue-500 hover:text-blue-700 p-2 rounded transition-colors duration-200 mr-3"
                                        onClick={() => openEditModal(team)}
                                    >
                                        <PencilAltIcon className="h-5 w-5" />
                                    </button>
                                    <button
                                        className="text-red-500 hover:text-red-700 p-2 rounded transition-colors duration-200"
                                        onClick={() => handleDeleteTeam(team.id)}
                                    >
                                        <TrashIcon className="h-5 w-5" />
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

            {/* Модальное окно для добавления/редактирования команды */}
            {isModalOpen && (
                <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
                    <h2 className="text-2xl font-bold mb-6 text-center mt-20">
                        {currentTeam ? 'Редактирование команды' : 'Добавление команды'}
                    </h2>
                    <form className="flex flex-col space-y-4">
                        {/* Номер планшета */}
                        <div className="flex flex-col md:flex-row items-start md:items-center">
                            <label
                                htmlFor="tabletNumber"
                                className="w-full md:w-1/3 text-left md:text-right mr-4 font-medium"
                            >
                                Номер планшета:
                            </label>
                            <div className="w-full md:w-2/3">
                                <input
                                    type="number"
                                    id="tabletNumber"
                                    placeholder="Введите номер планшета"
                                    value={
                                        currentTeam
                                            ? currentTeam.tabletNumber || ''
                                            : newTeam.tabletNumber || ''
                                    }
                                    onChange={(e) => {
                                        const value = Number(e.target.value);
                                        if (currentTeam) {
                                            setCurrentTeam({
                                                ...currentTeam,
                                                tabletNumber: value,
                                            });
                                        } else {
                                            setNewTeam({
                                                ...newTeam,
                                                tabletNumber: value,
                                            });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.tabletNumber ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.tabletNumber && (
                                    <p className="text-red-500 text-sm mt-1">
                                        {errors.tabletNumber}
                                    </p>
                                )}
                            </div>
                        </div>
                        {/* Название команды */}
                        <div className="flex flex-col md:flex-row items-start md:items-center">
                            <label
                                htmlFor="teamName"
                                className="w-full md:w-1/3 text-left md:text-right mr-4 font-medium"
                            >
                                Название команды:
                            </label>
                            <div className="w-full md:w-2/3">
                                <input
                                    type="text"
                                    id="teamName"
                                    placeholder="Введите название команды"
                                    value={currentTeam ? currentTeam.teamName : newTeam.teamName}
                                    onChange={(e) => {
                                        if (currentTeam) {
                                            setCurrentTeam({
                                                ...currentTeam,
                                                teamName: e.target.value,
                                            });
                                        } else {
                                            setNewTeam({ ...newTeam, teamName: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.teamName ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.teamName && (
                                    <p className="text-red-500 text-sm mt-1">{errors.teamName}</p>
                                )}
                            </div>
                        </div>
                        {/* Номер стола */}
                        <div className="flex flex-col md:flex-row items-start md:items-center">
                            <label
                                htmlFor="tableNumber"
                                className="w-full md:w-1/3 text-left md:text-right mr-4 font-medium"
                            >
                                Номер стола:
                            </label>
                            <div className="w-full md:w-2/3">
                                <input
                                    type="number"
                                    id="tableNumber"
                                    placeholder="Введите номер стола"
                                    value={
                                        currentTeam
                                            ? currentTeam.tableNumber || ''
                                            : newTeam.tableNumber || ''
                                    }
                                    onChange={(e) => {
                                        const value = Number(e.target.value);
                                        if (currentTeam) {
                                            setCurrentTeam({
                                                ...currentTeam,
                                                tableNumber: value,
                                            });
                                        } else {
                                            setNewTeam({ ...newTeam, tableNumber: value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.tableNumber ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.tableNumber && (
                                    <p className="text-red-500 text-sm mt-1">
                                        {errors.tableNumber}
                                    </p>
                                )}
                            </div>
                        </div>
                        {/* Зарегистрировано участников */}
                        <div className="flex flex-col md:flex-row items-start md:items-center">
                            <label
                                htmlFor="registeredParticipants"
                                className="w-full md:w-1/3 text-left md:text-right mr-4 font-medium"
                            >
                                Зарегистрировано участников:
                            </label>
                            <div className="w-full md:w-2/3">
                                <input
                                    type="number"
                                    id="registeredParticipants"
                                    placeholder="Введите количество"
                                    value={
                                        currentTeam
                                            ? currentTeam.registeredParticipants || ''
                                            : newTeam.registeredParticipants || ''
                                    }
                                    onChange={(e) => {
                                        const value = Number(e.target.value);
                                        if (currentTeam) {
                                            setCurrentTeam({
                                                ...currentTeam,
                                                registeredParticipants: value,
                                            });
                                        } else {
                                            setNewTeam({
                                                ...newTeam,
                                                registeredParticipants: value,
                                            });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.registeredParticipants ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.registeredParticipants && (
                                    <p className="text-red-500 text-sm mt-1">
                                        {errors.registeredParticipants}
                                    </p>
                                )}
                            </div>
                        </div>
                        {/* Фактически участников */}
                        <div className="flex flex-col md:flex-row items-start md:items-center mb-10">
                            <label
                                htmlFor="actualParticipants"
                                className="w-full md:w-1/3 text-left md:text-right mr-4 font-medium"
                            >
                                Фактически участников:
                            </label>
                            <div className="w-full md:w-2/3">
                                <input
                                    type="number"
                                    id="actualParticipants"
                                    placeholder="Введите количество"
                                    value={
                                        currentTeam
                                            ? currentTeam.actualParticipants || ''
                                            : newTeam.actualParticipants || ''
                                    }
                                    onChange={(e) => {
                                        const value = Number(e.target.value);
                                        if (currentTeam) {
                                            setCurrentTeam({
                                                ...currentTeam,
                                                actualParticipants: value,
                                            });
                                        } else {
                                            setNewTeam({
                                                ...newTeam,
                                                actualParticipants: value,
                                            });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.actualParticipants ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.actualParticipants && (
                                    <p className="text-red-500 text-sm mt-1">
                                        {errors.actualParticipants}
                                    </p>
                                )}
                            </div>
                        </div>
                        {/* Кнопки сохранения и отмены */}
                        <div className="flex justify-center space-x-4 mt-6  pb-20 px-[200px]">
                            <button
                                type="button"
                                className="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 transition-colors duration-200 flex items-center"
                                onClick={handleSave}
                            >
                                <CheckIcon className="h-5 w-5 mr-2" />
                                {currentTeam ? 'Сохранить изменения' : 'Добавить команду'}
                            </button>
                            <button
                                type="button"
                                className="bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600 transition-colors duration-200 flex items-center"
                                onClick={() => setIsModalOpen(false)}
                            >
                                <XIcon className="h-5 w-5 mr-2" />
                                Отмена
                            </button>
                        </div>
                    </form>
                </Modal>
            )}
        </div>
    );
};

export default TeamsTab;


File: Users.tsx
"use client";
import React, { useState } from 'react';
import Modal from './Modal';
import {
    XIcon,
    PlusIcon,
    PencilAltIcon,
    TrashIcon,
    CheckIcon,
} from '@heroicons/react/outline';

interface Player {
    id: number;
    playerName: string;
    team: string;
    gameName: string;
    email: string;
    phone: string;
    questionDifficulty: string;
    aboutHost: string;
    payment: boolean;
}

const PlayersTab: React.FC = () => {
    const [players, setPlayers] = useState<Player[]>([
        {
            id: 1,
            playerName: 'Иван',
            team: 'Команда А',
            gameName: 'Игра 1',
            email: 'mail@mail.ru',
            phone: '88005553535',
            questionDifficulty: 'Легко',
            aboutHost: 'Хорошо',
            payment: false,
        },
        {
            id: 2,
            playerName: 'Мария',
            team: 'Команда Б',
            gameName: 'Игра 2',
            email: 'maria@mail.ru',
            phone: '88001234567',
            questionDifficulty: 'Средне',
            aboutHost: 'Отлично',
            payment: true,
        },
        // Добавьте больше тестовых данных при необходимости
    ]);

    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const [currentPlayer, setCurrentPlayer] = useState<Player | null>(null);
    const [newPlayer, setNewPlayer] = useState<Player>({
        id: players.length + 1,
        playerName: '',
        team: '',
        gameName: '',
        email: '',
        phone: '',
        questionDifficulty: '',
        aboutHost: '',
        payment: false,
    });

    // States for validation errors
    const [errors, setErrors] = useState({
        playerName: '',
        team: '',
        gameName: '',
        email: '',
        phone: '',
        questionDifficulty: '',
        aboutHost: '',
    });

    const openEditModal = (player: Player) => {
        setCurrentPlayer(player);
        setErrors({
            playerName: '',
            team: '',
            gameName: '',
            email: '',
            phone: '',
            questionDifficulty: '',
            aboutHost: '',
        });
        setIsModalOpen(true);
    };

    const openAddModal = () => {
        setCurrentPlayer(null);
        setNewPlayer({
            id: players.length + 1,
            playerName: '',
            team: '',
            gameName: '',
            email: '',
            phone: '',
            questionDifficulty: '',
            aboutHost: '',
            payment: false,
        });
        setErrors({
            playerName: '',
            team: '',
            gameName: '',
            email: '',
            phone: '',
            questionDifficulty: '',
            aboutHost: '',
        });
        setIsModalOpen(true);
    };

    const handleSave = () => {
        const playerToSave = currentPlayer ? currentPlayer : newPlayer;

        // Validation
        const newErrors = {
            playerName: '',
            team: '',
            gameName: '',
            email: '',
            phone: '',
            questionDifficulty: '',
            aboutHost: '',
        };
        let isValid = true;

        if (!playerToSave.playerName.trim()) {
            newErrors.playerName = 'Пожалуйста, введите имя игрока.';
            isValid = false;
        }
        if (!playerToSave.team.trim()) {
            newErrors.team = 'Пожалуйста, укажите команду.';
            isValid = false;
        }
        if (!playerToSave.gameName.trim()) {
            newErrors.gameName = 'Пожалуйста, укажите название игры.';
            isValid = false;
        }
        if (!playerToSave.email.trim()) {
            newErrors.email = 'Пожалуйста, введите электронную почту.';
            isValid = false;
        }
        if (!playerToSave.phone.trim()) {
            newErrors.phone = 'Пожалуйста, введите номер телефона.';
            isValid = false;
        }
        if (!playerToSave.questionDifficulty.trim()) {
            newErrors.questionDifficulty = 'Пожалуйста, укажите сложность вопросов.';
            isValid = false;
        }
        if (!playerToSave.aboutHost.trim()) {
            newErrors.aboutHost = 'Пожалуйста, укажите информацию о ведущем.';
            isValid = false;
        }

        setErrors(newErrors);

        if (!isValid) {
            return;
        }

        if (currentPlayer) {
            // Update existing player
            setPlayers(players.map((player) => (player.id === currentPlayer.id ? playerToSave : player)));
        } else {
            // Add new player
            setPlayers([...players, playerToSave]);
        }
        setIsModalOpen(false);
    };

    const handleDeletePlayer = (playerId: number) => {
        if (confirm('Вы уверены, что хотите удалить этого игрока?')) {
            setPlayers(players.filter((player) => player.id !== playerId));
        }
    };

    return (
        <div className="bg-[#FAF3DD] text-black p-20 rounded-lg shadow-lg text-center py-20">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold">Игроки</h2>
                <button
                    className="bg-[#D4A373] text-white py-2 px-4 rounded hover:bg-[#c99b6d] transition-colors duration-200 flex items-center"
                    onClick={openAddModal}
                >
                    <PlusIcon className="h-5 w-5 mr-2" />
                    Добавить игрока
                </button>
            </div>
            <div className="overflow-x-auto text-[14px]">
                <table className="min-w-full bg-white rounded-lg overflow-hidden">
                    <thead>
                        <tr>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                Имя игрока
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                Команда
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                Название игры
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                Почта
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                Телефон
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                Сложность вопросов
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                О ведущем
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                Оплата?
                            </th>
                            <th className="px-4 py-3 bg-[#D4A373] text-white text-center text-md font-semibold">
                                Действия
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        {players.map((player, index) => (
                            <tr
                                key={player.id}
                                className={`${
                                    index % 2 === 0 ? 'bg-white' : 'bg-[#FFF5E1]'
                                } hover:bg-gray-200 transition-colors duration-200`}
                            >
                                <td className="border px-4 py-3 text-center">{player.playerName}</td>
                                <td className="border px-4 py-3 text-center">{player.team}</td>
                                <td className="border px-4 py-3 text-center">{player.gameName}</td>
                                <td className="border px-4 py-3 text-center">{player.email}</td>
                                <td className="border px-4 py-3 text-center">{player.phone}</td>
                                <td className="border px-4 py-3 text-center">{player.questionDifficulty}</td>
                                <td className="border px-4 py-3 text-center">{player.aboutHost}</td>
                                <td className="border px-4 py-3 text-center">
                                    {player.payment ? 'ДА' : 'НЕТ'}
                                </td>
                                <td className="px-4 py-7 flex justify-center border">
                                    <button
                                        className="text-blue-500 hover:text-blue-700 p-2 rounded transition-colors duration-200 mr-3"
                                        onClick={() => openEditModal(player)}
                                    >
                                        <PencilAltIcon className="h-5 w-5" />
                                    </button>
                                    <button
                                        className="text-red-500 hover:text-red-700 p-2 rounded transition-colors duration-200"
                                        onClick={() => handleDeletePlayer(player.id)}
                                    >
                                        <TrashIcon className="h-5 w-5" />
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

            {/* Модальное окно для добавления/редактирования игрока */}
            {isModalOpen && (
                <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
                    <div className="m-20">
                        <h2 className="text-2xl font-bold mb-6 text-center">
                            {currentPlayer ? 'Редактирование игрока' : 'Добавление игрока'}
                        </h2>
                        <form className="flex flex-col space-y-4">
                            {/* Имя игрока */}
                            <div className="flex flex-col">
                                <label className="font-medium">Имя игрока:</label>
                                <input
                                    type="text"
                                    placeholder="Введите имя игрока"
                                    value={currentPlayer ? currentPlayer.playerName : newPlayer.playerName}
                                    onChange={(e) => {
                                        if (currentPlayer) {
                                            setCurrentPlayer({ ...currentPlayer, playerName: e.target.value });
                                        } else {
                                            setNewPlayer({ ...newPlayer, playerName: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.playerName ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.playerName && (
                                    <p className="text-red-500 text-sm mt-1">{errors.playerName}</p>
                                )}
                            </div>
                            {/* Команда */}
                            <div className="flex flex-col">
                                <label className="font-medium">Команда:</label>
                                <input
                                    type="text"
                                    placeholder="Введите название команды"
                                    value={currentPlayer ? currentPlayer.team : newPlayer.team}
                                    onChange={(e) => {
                                        if (currentPlayer) {
                                            setCurrentPlayer({ ...currentPlayer, team: e.target.value });
                                        } else {
                                            setNewPlayer({ ...newPlayer, team: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.team ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.team && (
                                    <p className="text-red-500 text-sm mt-1">{errors.team}</p>
                                )}
                            </div>
                            {/* Название игры */}
                            <div className="flex flex-col">
                                <label className="font-medium">Название игры:</label>
                                <input
                                    type="text"
                                    placeholder="Введите название игры"
                                    value={currentPlayer ? currentPlayer.gameName : newPlayer.gameName}
                                    onChange={(e) => {
                                        if (currentPlayer) {
                                            setCurrentPlayer({ ...currentPlayer, gameName: e.target.value });
                                        } else {
                                            setNewPlayer({ ...newPlayer, gameName: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.gameName ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.gameName && (
                                    <p className="text-red-500 text-sm mt-1">{errors.gameName}</p>
                                )}
                            </div>
                            {/* Почта */}
                            <div className="flex flex-col">
                                <label className="font-medium">Почта:</label>
                                <input
                                    type="email"
                                    placeholder="Введите почту"
                                    value={currentPlayer ? currentPlayer.email : newPlayer.email}
                                    onChange={(e) => {
                                        if (currentPlayer) {
                                            setCurrentPlayer({ ...currentPlayer, email: e.target.value });
                                        } else {
                                            setNewPlayer({ ...newPlayer, email: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.email ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.email && (
                                    <p className="text-red-500 text-sm mt-1">{errors.email}</p>
                                )}
                            </div>
                            {/* Телефон */}
                            <div className="flex flex-col">
                                <label className="font-medium">Телефон:</label>
                                <input
                                    type="tel"
                                    placeholder="Введите номер телефона"
                                    value={currentPlayer ? currentPlayer.phone : newPlayer.phone}
                                    onChange={(e) => {
                                        if (currentPlayer) {
                                            setCurrentPlayer({ ...currentPlayer, phone: e.target.value });
                                        } else {
                                            setNewPlayer({ ...newPlayer, phone: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.phone ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.phone && (
                                    <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
                                )}
                            </div>
                            {/* Сложность вопросов */}
                            <div className="flex flex-col">
                                <label className="font-medium">Сложность вопросов:</label>
                                <input
                                    type="text"
                                    placeholder="Введите сложность вопросов"
                                    value={
                                        currentPlayer
                                            ? currentPlayer.questionDifficulty
                                            : newPlayer.questionDifficulty
                                    }
                                    onChange={(e) => {
                                        if (currentPlayer) {
                                            setCurrentPlayer({ ...currentPlayer, questionDifficulty: e.target.value });
                                        } else {
                                            setNewPlayer({ ...newPlayer, questionDifficulty: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.questionDifficulty ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.questionDifficulty && (
                                    <p className="text-red-500 text-sm mt-1">{errors.questionDifficulty}</p>
                                )}
                            </div>
                            {/* О ведущем */}
                            <div className="flex flex-col">
                                <label className="font-medium">О ведущем:</label>
                                <input
                                    type="text"
                                    placeholder="Введите информацию о ведущем"
                                    value={currentPlayer ? currentPlayer.aboutHost : newPlayer.aboutHost}
                                    onChange={(e) => {
                                        if (currentPlayer) {
                                            setCurrentPlayer({ ...currentPlayer, aboutHost: e.target.value });
                                        } else {
                                            setNewPlayer({ ...newPlayer, aboutHost: e.target.value });
                                        }
                                    }}
                                    className={`p-2 rounded border w-full focus:outline-none focus:ring-2 focus:ring-[#D4A373] ${
                                        errors.aboutHost ? 'border-red-500' : ''
                                    }`}
                                />
                                {errors.aboutHost && (
                                    <p className="text-red-500 text-sm mt-1">{errors.aboutHost}</p>
                                )}
                            </div>
                            {/* Оплата */}
                            <div className="flex items-center mt-4">
                                <input
                                    type="checkbox"
                                    checked={currentPlayer ? currentPlayer.payment : newPlayer.payment}
                                    onChange={(e) => {
                                        if (currentPlayer) {
                                            setCurrentPlayer({ ...currentPlayer, payment: e.target.checked });
                                        } else {
                                            setNewPlayer({ ...newPlayer, payment: e.target.checked });
                                        }
                                    }}
                                    className="mr-2 h-5 w-5"
                                />
                                <label className="font-medium">Оплата произведена</label>
                            </div>
                            {/* Кнопки сохранения и отмены */}
                            <div className="flex justify-center space-x-4 mt-6 pb-20 px-[200px]">
                                <button
                                    type="button"
                                    className="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 transition-colors duration-200 flex items-center"
                                    onClick={handleSave}
                                >
                                    <CheckIcon className="h-5 w-5 mr-2" />
                                    {currentPlayer ? 'Сохранить изменения' : 'Добавить игрока'}
                                </button>
                                <button
                                    type="button"
                                    className="bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600 transition-colors duration-200 flex items-center"
                                    onClick={() => setIsModalOpen(false)}
                                >
                                    <XIcon className="h-5 w-5 mr-2" />
                                    Отмена
                                </button>
                            </div>
                        </form>
                    </div>
                </Modal>
            )}
        </div>
    );
};

export default PlayersTab;


File: page.tsx
"use client";
import React from 'react';
import CommentForm from '../components/CommentForm';
import ReturnButton from '../components/ReturnButton';

const CommentPage: React.FC = () => {
    const handleSubmit = (data: any) => {
        // Обработка данных комментария
        console.log('Данные комментария:', data);
    };

    return (
        <div className="w-screen h-screen bg-[#1c2536] text-white flex flex-col">
            <div className="flex-grow container mx-auto p-5 flex items-center justify-center">
                <CommentForm onSubmit={handleSubmit} />
            </div>
            <div className="p-5">
                <ReturnButton />
            </div>
        </div>
    );
};

export default CommentPage;

File: CardInputForm.tsx
"use client";
import React, { useState } from 'react';

interface CardInputFormProps {
    onSubmit: () => void;
}

const CardInputForm: React.FC<CardInputFormProps> = ({ onSubmit }) => {
    const [cardNumber, setCardNumber] = useState('1234 5678 9012 3456');
    const [expiry, setExpiry] = useState('12/24');
    const [cvv, setCvv] = useState('123');

    const handleSubmit = () => {
        // Обработка данных карты
        onSubmit();
    };

    return (
        <div className="text-white">
            <h2 className="text-2xl mb-4">Оплата банковской картой</h2>
            <div className="card-input-group flex flex-col mb-4">
                <label>Номер карты</label>
                <input
                    className="border p-2 rounded text-black"
                    value={cardNumber}
                    onChange={(e) => setCardNumber(e.target.value)}
                />
            </div>
            <div className="flex mb-4">
                <div className="card-input-group flex-1 mr-2">
                    <label>Срок действия</label>
                    <input
                        className="border p-2 rounded text-black"
                        value={expiry}
                        onChange={(e) => setExpiry(e.target.value)}
                    />
                </div>
                <div className="card-input-group flex-1 ml-2">
                    <label>CVV</label>
                    <input
                        className="border p-2 rounded text-black"
                        value={cvv}
                        onChange={(e) => setCvv(e.target.value)}
                    />
                </div>
            </div>
            <button
                className="pay-button bg-[#f4c542] text-white py-2 px-4 rounded w-full hover:bg-[#d2a636]"
                onClick={handleSubmit}
            >
                Оплатить
            </button>
        </div>
    );
};

export default CardInputForm;

File: CommentForm.tsx
"use client";
import React, { useState } from 'react';

interface CommentFormProps {
    onSubmit: (data: { comment: string; questionFeedback: string[]; hostFeedback: string[] }) => void;
}

const questionOptions = ['Сложные вопросы', 'Интересные темы', 'Плохая формулировка'];
const hostOptions = ['Приятный голос', 'Хорошая подача', 'Медленный темп'];

const CommentForm: React.FC<CommentFormProps> = ({ onSubmit }) => {
    const [comment, setComment] = useState('Очень понравилось!');
    const [questionFeedback, setQuestionFeedback] = useState<string[]>(['Интересные темы']);
    const [hostFeedback, setHostFeedback] = useState<string[]>(['Хорошая подача']);

    const handleCheckboxChange = (option: string, setState: React.Dispatch<React.SetStateAction<string[]>>, state: string[]) => {
        if (state.includes(option)) {
            setState(state.filter((item) => item !== option));
        } else {
            setState([...state, option]);
        }
    };

    const handleSubmit = () => {
        onSubmit({ comment, questionFeedback, hostFeedback });
    };

    return (
        <div className="comment-page bg-[#1c2536] text-white rounded-2xl p-10 shadow-lg">
            <h2 className="text-2xl mb-4">Оставьте ваш комментарий</h2>
            <textarea
                className="comment-box border border-[#f4c542] rounded w-full p-2 mb-4 text-black"
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                placeholder="Ваш комментарий..."
            />
            <div className="checkbox-group mb-4">
                <h3 className="mb-2">Оценка вопросов:</h3>
                {questionOptions.map((option) => (
                    <label key={option} className="block">
                        <input
                            type="checkbox"
                            checked={questionFeedback.includes(option)}
                            onChange={() => handleCheckboxChange(option, setQuestionFeedback, questionFeedback)}
                        />{' '}
                        {option}
                    </label>
                ))}
            </div>
            <div className="checkbox-group mb-4">
                <h3 className="mb-2">Оценка ведущего:</h3>
                {hostOptions.map((option) => (
                    <label key={option} className="block">
                        <input
                            type="checkbox"
                            checked={hostFeedback.includes(option)}
                            onChange={() => handleCheckboxChange(option, setHostFeedback, hostFeedback)}
                        />{' '}
                        {option}
                    </label>
                ))}
            </div>
            <button
                className="submit-button bg-[#f4c542] text-white py-2 px-4 rounded w-full hover:bg-[#d2a636]"
                onClick={handleSubmit}
            >
                Отправить данные
            </button>
        </div>
    );
};

export default CommentForm;

File: Contacts.tsx
"use client";
import React from 'react';
import { FaTelegramPlane, FaWhatsapp, FaVk } from 'react-icons/fa';
import ReturnButton from './ReturnButton';

const Contacts: React.FC = () => {
    return (
        <div className="contact-page bg-[#1c2536] text-white rounded-2xl p-10 text-center">
            <h2 className="text-2xl font-bold mb-6">Наши контакты</h2>
            <div className="social-links flex justify-around text-4xl text-[#f4c542]">
                <a href="https://t.me/yourchannel" target="_blank" rel="noopener noreferrer">
                    <FaTelegramPlane />
                </a>
                <a href="https://wa.me/yourphonenumber" target="_blank" rel="noopener noreferrer">
                    <FaWhatsapp />
                </a>
                <a href="https://vk.com/yourpage" target="_blank" rel="noopener noreferrer">
                    <FaVk />
                </a>
            </div>
            <div className="mt-6">
                <ReturnButton />
            </div>
        </div>
    );
};

export default Contacts;

File: Header.tsx
"use client";
import React from 'react';

interface HeaderProps {
    teamName: string;
    tableNumber: number;
}

const Header: React.FC<HeaderProps> = ({ teamName, tableNumber }) => {
    return (
        <div className="flex justify-between items-center bg-[#2e3a50] py-[48px] px-[65px] rounded-[35px] text-white mt-5 border border-[#f4c542]">
            <div className="font-bold text-[60px]">{teamName}</div>
            <div className="text-[#f4c542] text-[67px] leading-[35px] mt-3">
                {tableNumber} <br /> <span className="text-[30px]">стол</span>
            </div>

        </div>
    );
};

export default Header;

File: LotteryForm.tsx
"use client";
import React, { useState } from 'react';

interface LotteryFormProps {
    onNext: (data: { name: string; email: string; phone: string }) => void;
}

const LotteryForm: React.FC<LotteryFormProps> = ({ onNext }) => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [phone, setPhone] = useState('');
    const [agree, setAgree] = useState(false);

    // Состояния для хранения ошибок
    const [errors, setErrors] = useState<{ name?: string; email?: string; phone?: string; agree?: string }>({});

    const validate = () => {
        const newErrors: { name?: string; email?: string; phone?: string; agree?: string } = {};

        if (!name.trim()) {
            newErrors.name = 'Пожалуйста, введите ваше имя.';
        }

        if (!email.trim()) {
            newErrors.email = 'Пожалуйста, введите вашу электронную почту.';
        } else if (!/\S+@\S+\.\S+/.test(email)) {
            newErrors.email = 'Пожалуйста, введите корректный email.';
        }

        if (!phone.trim()) {
            newErrors.phone = 'Пожалуйста, введите ваш телефон.';
        } else if (!/^\+?\d{10,15}$/.test(phone)) {
            newErrors.phone = 'Пожалуйста, введите корректный номер телефона.';
        }

        if (!agree) {
            newErrors.agree = 'Вы должны согласиться с политикой обработки персональных данных.';
        }

        setErrors(newErrors);

        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = () => {
        if (validate()) {
            onNext({ name, email, phone });
            // Сброс ошибок при успешной отправке
            setErrors({});
        }
    };

    return (
        <div className="bg-white p-8 mx-auto flex pt-[120px] pb-[60px] w-[85%]">
            <div className="w-1/2 pr-8">
                <div className="mb-14">
                    <span className="text-lg font-regular text-[#CC9F33] border border-[#CC9F33] p-3 px-5 rounded-[15px]">
                        КОМАНДА А
                    </span>
                </div>
                <h2 className="text-[45px] font-bold text-black mb-10 leading-[1.1]">Примите участие в нашей лотерее</h2>
                <div className="mb-3">
                    <input
                        type="text"
                        placeholder="Ваше имя"
                        className={`w-full border ${errors.name ? 'border-red-500' : 'border-gray-300'} p-3 rounded-[10px] focus:outline-none focus:ring-2 focus:ring-[#CC9F33] placeholder-black`}
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                    />
                    {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
                </div>
                <div className="mb-3">
                    <input
                        type="email"
                        placeholder="Ваша электронная почта"
                        className={`w-full border ${errors.email ? 'border-red-500' : 'border-gray-300'} p-3 rounded-[10px] focus:outline-none focus:ring-2 focus:ring-[#CC9F33] placeholder-black`}
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                    {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
                </div>
                <div className="mb-6">
                    <input
                        type="tel"
                        placeholder="Телефон"
                        className={`w-full border ${errors.phone ? 'border-red-500' : 'border-gray-300'} p-3 rounded-[10px] focus:outline-none focus:ring-2 focus:ring-[#CC9F33] placeholder-black`}
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                    />
                    {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
                </div>
                <button
                    onClick={handleSubmit}
                    className="bg-[#CC9F33] text-white py-3 px-6 rounded-[10px] font-regular hover:bg-[#b2882a] mb-8 w-full text-[14px]"
                >
                    УЧАСТВОВАТЬ В ЛОТЕРЕЕ
                </button>
                <div className="flex items-start mb-4">
                    <div className="flex items-center  mr-2 mt-2.5">
                        <input
                            type="checkbox"
                            className={`mr-2 w-[24px] h-[24px] border ${errors.agree ? 'border-red-500' : 'border-gray-300'} rounded bg-white appearance-none relative checked:bg-[#CC9F33]`}
                            checked={agree}
                            onChange={(e) => setAgree(e.target.checked)}
                        />
                        <style jsx>{`
                            input[type="checkbox"]:checked::after {
                                content: "";
                                display: block;
                                position: absolute;
                                top: 50%;
                                left: 50%;
                                width: 6px;
                                height: 12px;
                                border: solid white;
                                border-width: 0 2px 2px 0;
                                transform: translate(-50%, -50%) rotate(45deg);
                            }
                        `}</style>
                    </div>
                    <div className="flex-1">
                    <p className="text-[13px] text-gray-600 leading-[1.3] mt-1">
        Нажимая на кнопку, вы соглашаетесь <br /> с политикой обработки персональных данных
    </p>
                        {errors.agree && <p className="text-red-500 text-sm mt-1">{errors.agree}</p>}
                    </div>
                </div>
            </div>
            <div className="w-1/2 text-sm text-gray-800 pl-14">
                <h3 className="font-bold mb-4 text-[#CC9F33] text-[20px]">Правила проведения лотереи*</h3>
                <ul className="list-disc list-outside space-y-2 font-regular text-[14px]">
                    <li>Лотерея проводится в рамках квиз-игры и доступна всем участникам, пришедшим на игру.</li>
                    <li>Для участия необходимо зарегистрироваться, отправив ФИО и телефон в предложенной форме.</li>
                    <li>Каждый участник может зарегистрироваться только один раз, дубликаты удаляются.</li>
                    <li>Розыгрыш лотереи проводится в перерывах между раундами или по завершении квиз-игры.</li>
                    <li>Ведущий с помощью программы случайных чисел определяет победителя.</li>
                    <li>Если победитель присутствует, он выходит к ведущему и забирает приз.</li>
                    <li>Если победитель отсутствует, проводится повторный розыгрыш до тех пор, пока не будет найден присутствующий участник.</li>
                    <li>Призы могут включать подарочные сертификаты, бесплатные напитки, сувениры бара и другие поощрения.</li>
                    <li>Призы выдаются лично в руки победителям сразу после объявления результатов или по завершении игры.</li>
                    <li>Призы не подлежат обмену на деньги и возврату.</li>
                </ul>
                <p className="mt-[24px] mb-2 font-bold text-[#CC9F33]">Приятной игры и удачи в лотерее!</p>
                <p>Полные правила лотереи вы можете посмотреть тут: <a href="#" className="underline text-[#CC9F33]">ссылка</a></p>
            </div>
        </div>
    );

};

export default LotteryForm;


File: MenuGrid.tsx
"use client";
import React, { useState } from 'react';
import { FaUserShield } from 'react-icons/fa'; // Сохраняем импорт FaUserShield
import Modal from './Modal';
import LotteryForm from './LotteryForm';
import PlayerCountSelect from './PlayerCountSelect';
import PaymentOptions from './PaymentOptions';
import CardInputForm from './CardInputForm';

type MenuItem = {
    name: string;
    icon: React.ComponentType<{ className?: string }> | string; // Иконка может быть компонентом или строкой
    href?: string;
    action?: string;
};

const menuItems: MenuItem[] = [
    { name: 'Правила игры', icon: 'Info.svg', href: '/rules' }, // Используем Info.svg для "Правила игры"
    { name: 'Результаты игры', icon: 'Game_results.svg', href: '/results' },
    { name: 'Рейтинг команд', icon: 'Team_rating.svg', href: '/rating' },
    { name: 'Меню ресторана', icon: 'Food_menu.svg', href: '/menu' },
    { name: 'Лотерея', icon: 'Lotery.svg', action: 'openLottery' },
    { name: 'Оплата', icon: 'Payment.svg', href: '/payment' },
    { name: 'Хелп', icon: 'Help.svg', href: '/help' },
    { name: 'Наши контакты', icon: 'Contacts.svg', href: '/contacts' },
    { name: 'Админ ', icon: FaUserShield, href: '/admin' },
];

const MenuGrid: React.FC = () => {
    const [isLotteryOpen, setIsLotteryOpen] = useState(false);
    const [lotteryStep, setLotteryStep] = useState(1);
    const [lotteryData, setLotteryData] = useState<any>({});

    const handleLotteryNext = (data: any) => {
        setLotteryData({ ...lotteryData, ...data });
        setLotteryStep(lotteryStep + 1);
    };

    const handleLotteryClose = () => {
        setIsLotteryOpen(false);
        setLotteryStep(1);
        setLotteryData({});
    };


    const handleMenuClick = (item: MenuItem) => {
        if (item.action === 'openLottery') {
            setIsLotteryOpen(true);
        } else if (item.href) {
            // Дополнительная проверка на наличие window (опционально)
            if (typeof window !== 'undefined') {
                window.location.href = item.href;
            }
        }
    };

    return (
        <>
            <div className="menu grid grid-cols-3 gap-4 pl-12 pt-12">
                {menuItems.map((item) => (
                    <div
                        key={item.name}
                        className="menu-item flex flex-col text-white text-lg transition-transform duration-200 hover:scale-105 cursor-pointer mb-[64px]"
                        onClick={() => handleMenuClick(item)}
                    >
                        {typeof item.icon === 'string' ? (
                            <img
                                src={`/${item.icon}`}
                                alt={item.name}
                                className="icon text-[#f4c542] text-3xl mb-2 w-[80px] h-[80px]" // Настройте размеры по необходимости
                            />
                        ) : (
                            <item.icon className="icon text-[#f4c542] text-3xl mb-2 w-12 h-12" />
                        )}
                        <span className='text-[48px] font-bold mt-[30px]'>{item.name}</span>
                    </div>
                ))}
            </div>
            {isLotteryOpen && (
                <Modal isOpen={isLotteryOpen} onClose={handleLotteryClose}>
                    {lotteryStep === 1 && <LotteryForm onNext={handleLotteryNext} />}
                    {lotteryStep === 2 && <PlayerCountSelect onNext={handleLotteryNext} />}
                    {lotteryStep === 3 && (
                        <PaymentOptions
                            amount={lotteryData.playerCount * 100 || 100} // Пример суммы
                            pricePerPlayer={100} // Assuming 100 is the price per player
                            onBack={() => setLotteryStep(lotteryStep - 1)}
                            onNext={() => setLotteryStep(lotteryStep + 1)}
                        />
                    )}
                    {lotteryStep === 4 && <CardInputForm onSubmit={handleLotteryClose} />}
                </Modal>
            )}
        </>
    );
};

export default MenuGrid;


File: Modal.tsx
"use client";
import React from 'react';

interface ModalProps {
    isOpen: boolean;
    onClose: () => void;
    children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {
    if (!isOpen) return null;

    return (
        <div className="modal fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-white text-black rounded-2xl p-6 relative w-[58%]">
            <button
                className="absolute top-[39px] right-[49px]"
                onClick={onClose}
                aria-label="Закрыть"
            >
    <img
        src="/Close.svg"
        alt="Закрыть"
        className="h-[112px] w-[112px]" // Настройте размер по необходимости
    />
</button>
                {children}
            </div>
        </div>
    );
};

export default Modal;


File: PaymentOptions.tsx
"use client";
import React, { useState } from 'react';

interface PaymentOptionsProps {
    amount: number;
    pricePerPlayer: number;
    onBack: () => void;
    onNext: () => void;
}

const PaymentOptions: React.FC<PaymentOptionsProps> = ({ amount, pricePerPlayer, onBack, onNext }) => {
    const [method, setMethod] = useState<'qr' | 'card'>('qr');
    const [cardNumber, setCardNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [cvv, setCvv] = useState('');
    const [errors, setErrors] = useState<{ cardNumber?: string; expiryDate?: string; cvv?: string }>({});

    const validateCardDetails = () => {
        const newErrors: { cardNumber?: string; expiryDate?: string; cvv?: string } = {};

        // Валидация номера карты (16 цифр)
        if (!/^\d{16}$/.test(cardNumber.replace(/\s+/g, ''))) {
            newErrors.cardNumber = 'Введите корректный номер карты (16 цифр).';
        }

        // Валидация даты (формат MM/YY)
        if (!/^(0[1-9]|1[0-2])\/\d{2}$/.test(expiryDate)) {
            newErrors.expiryDate = 'Введите корректную дату в формате MM/YY.';
        }

        // Валидация CVV (3 цифры)
        if (!/^\d{3}$/.test(cvv)) {
            newErrors.cvv = 'Введите корректный CVV (3 цифры).';
        }

        setErrors(newErrors);

        return Object.keys(newErrors).length === 0;
    };

    const handlePayment = () => {
        if (validateCardDetails()) {
            onNext();
        }
    };

    const handleCardNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value.replace(/\D/g, ''); // Удаляем все нецифровые символы
        if (value.length <= 16) {
            setCardNumber(value);
        }
    };

    const handleExpiryDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        let value = e.target.value.replace(/\D/g, ''); // Удаляем все нецифровые символы
        if (value.length > 4) {
            value = value.slice(0, 4);
        }

        if (value.length > 2) {
            value = `${value.slice(0, 2)}/${value.slice(2)}`;
        }

        setExpiryDate(value);
    };

    const handleCvvChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value.replace(/\D/g, ''); // Удаляем все нецифровые символы
        if (value.length <= 3) {
            setCvv(value);
        }
    };

    return (
        <div className="mt-[80px] pt-[20px] pb-[60px] w-[85%] mx-auto p-4 bg-white rounded-lg">
            <div className="flex justify-between items-center mb-2">
                <button onClick={onBack} className="text-gray-600">
                    <span className="flex items-center">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-6 w-6"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7" />
                        </svg>
                        <span className="ml-1">назад</span>
                    </span>
                </button>
            </div>
            <div className="mb-12 mt-12">
                <span className="text-lg font-regular text-[#CC9F33] border border-[#CC9F33] p-3 px-5 rounded-[15px]">
                    КОМАНДА А
                </span>
            </div>
            <h2 className="text-[45px] font-bold text-black leading-[1.1]">
                Вы можете оплатить любым <br /> удобным для вас способом
            </h2>
            <div className="flex justify-start items-baseline mb-[40px] text-2xl font-semibold mt-[40px]">
                <div className="flex items-baseline">
                    <span className="text-[36px] font-regular">5600 ₽</span>
                    <span className="ml-3 text-[24px] font-normal text-gray-500">к оплате</span>
                </div>
                <div className="flex items-baseline ml-20">
                    <span className="text-[36px] font-regular">700 ₽</span>
                    <span className="ml-3 text-[24px] font-normal text-gray-500">цена за 1 человека</span>
                </div>
            </div>
            <div className="flex border-b border-gray-300 mb-4 w-[460px]">
                <button
                    className={`flex-1 text-left py-2 font-semibold pl-4 ${
                        method === 'qr' ? 'text-[#CC9F33] border-b-2 border-[#CC9F33]' : 'text-gray-500'
                    }`}
                    onClick={() => setMethod('qr')}
                >
                    Оплата QR кодом
                </button>
                <button
                    className={`flex-1 text-center py-2 font-semibold ${
                        method === 'card' ? 'text-[#CC9F33] border-b-2 border-[#CC9F33]' : 'text-gray-500'
                    }`}
                    onClick={() => setMethod('card')}
                >
                    Банковской картой
                </button>
            </div>
            {method === 'qr' ? (
                <div className="flex flex-col items-start mb-4 h-[230px] w-[460px]">
                    <img src="/qr.png" alt="QR Code" className="w-40 h-40 mt-[10px]" />
                    <button
                        onClick={onNext}
                        className=" w-[460px] bg-[#CC9F33] text-white py-3 rounded-lg font-semibold hover:bg-[#b28d2a] block mt-[20px]"
                    >
                        оплатить
                    </button>
                </div>
            ) : (
                <div className="mb-4 w-[460px]">
                    <p className="text-[16px] mb-2 font-bold">Заполните данные своей карты</p>
                    <div className="mb-2">
                        <input
                            type="text"
                            placeholder="Номер карты"
                            className={`w-full border ${errors.cardNumber ? 'border-red-500' : 'border-gray-300'} p-2 rounded-lg mb-1 placeholder-black focus:outline-none focus:ring-2 focus:ring-[#CC9F33]`}
                            value={cardNumber}
                            onChange={handleCardNumberChange}
                        />
                        {errors.cardNumber && <p className="text-red-500 text-sm mt-1">{errors.cardNumber}</p>}
                    </div>
                    <div className="flex space-x-2 mb-2">
                        <div className="flex-1">
                            <input
                                type="text"
                                placeholder="Месяц / год"
                                className={`w-full border ${errors.expiryDate ? 'border-red-500' : 'border-gray-300'} p-2 rounded-lg mb-1 placeholder-black focus:outline-none focus:ring-2 focus:ring-[#CC9F33]`}
                                value={expiryDate}
                                onChange={handleExpiryDateChange}
                            />
                            {errors.expiryDate && <p className="text-red-500 text-sm mt-1">{errors.expiryDate}</p>}
                        </div>
                        <div className="w-1/3">
                            <input
                                type="text"
                                placeholder="CVV"
                                className={`w-full border ${errors.cvv ? 'border-red-500' : 'border-gray-300'} p-2 rounded-lg mb-1 placeholder-black focus:outline-none focus:ring-2 focus:ring-[#CC9F33]`}
                                value={cvv}
                                onChange={handleCvvChange}
                            />
                            {errors.cvv && <p className="text-red-500 text-sm mt-1">{errors.cvv}</p>}
                        </div>
                    </div>
                    <button
                        onClick={handlePayment}
                        className="w-full bg-[#CC9F33] text-white py-3 rounded-lg font-semibold hover:bg-[#b28d2a] block mt-[20px]"
                    >
                        оплатить
                    </button>
                </div>
            )}
        </div>
    );
};

export default PaymentOptions;


File: PlayerCountSelect.tsx
"use client";
import React, { useState } from 'react';

interface PlayerCountSelectProps {
    onNext: (data: { playerCount: number; email: string; promoCode?: string }) => void;
}

const PlayerCountSelect: React.FC<PlayerCountSelectProps> = ({ onNext }) => {
    const [playerCount, setPlayerCount] = useState(1);
    const pricePerPlayer = 700; // Цена за одного человека
    const teamName = "КОМАНДА А";
    const [email, setEmail] = useState('');
    const [promoCode, setPromoCode] = useState('');
    const [isChecked, setIsChecked] = useState(false);
    const [checkboxError, setCheckboxError] = useState('');

    const handleSubmit = () => {
        if (!isChecked) {
            setCheckboxError('Вы должны согласиться с политикой обработки персональных данных.');
            return;
        }
        setCheckboxError('');
        onNext({ playerCount, email, promoCode });
    };

    const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setIsChecked(e.target.checked);
        if (e.target.checked) {
            setCheckboxError('');
        }
    };

    return (
        <div className="pt-[100px] pb-[60px] w-[85%] mx-auto p-4 bg-white rounded-lg">
            <div className="mb-12">
                <span className="text-lg font-regular text-[#CC9F33] border border-[#CC9F33] p-3 px-5 rounded-[15px]">
                    {teamName}
                </span>
            </div>
            <h2 className="text-[45px] font-bold text-black mb-10 leading-[1.1]">
                Выберите количество игроков,<br /> за которых будете оплачивать
            </h2>
            <div className="flex flex-wrap justify-start mb-4">
                {[...Array(12)].map((_, index) => (
                    <button
                        key={index}
                        className={`w-[56px] h-[56px] m-1 rounded-full text-lg font-semibold ${
                            playerCount === index + 1
                                ? 'bg-[#CC9F33] text-white'
                                : 'bg-gray-200 text-black'
                        }`}
                        onClick={() => setPlayerCount(index + 1)}
                    >
                        {index + 1}
                    </button>
                ))}
            </div>
            <div className="flex justify-start items-baseline mb-4 text-2xl font-semibold mt-10">
                <div className="flex items-baseline">
                    <span className="text-[36px] font-regular">{playerCount * pricePerPlayer} ₽</span>
                    <span className="ml-3 text-[24px] font-normal text-gray-500">к оплате</span>
                </div>
                <div className="flex items-baseline ml-20">
                    <span className="text-[36px] font-regular">{pricePerPlayer} ₽</span>
                    <span className="ml-3 text-[24px] font-normal text-gray-500">цена за 1 человека</span>
                </div>
            </div>
            <div className="mb-4 w-[460px]">
                <p className="font-bold mb-[16px] leading-[1.1] mt-[40px]">
                    Напишите вашу почту, на которую <br />
                    вы хотите, чтобы пришел чек
                </p>
                <input
                    type="email"
                    placeholder="Ваша электронная почта"
                    className="w-full border border-gray-300 p-[14px] rounded-lg mb-2 placeholder-black  focus:outline-none focus:ring-2 focus:ring-[#CC9F33]"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                />
                <input
                    type="text"
                    placeholder="Введите промокод"
                    className="w-full border border-gray-300 p-[14px] rounded-lg mb-4 placeholder-black focus:outline-none focus:ring-2 focus:ring-[#CC9F33]"
                    value={promoCode}
                    onChange={(e) => setPromoCode(e.target.value)}
                />
            </div>
            <button
                className="bg-[#CC9F33] text-white py-3 rounded-lg font-semibold hover:bg-[#b28d2a] w-[460px] mb-4"
                onClick={handleSubmit}
            >
                ПЕРЕЙТИ К ОПЛАТЕ
            </button>
            <div className="flex items-start">
                <div className="flex items-center mr-2 mt-2.5">
                    <input
                        type="checkbox"
                        className={`mr-2 w-[24px] h-[24px] border rounded bg-white appearance-none relative checked:bg-[#CC9F33]`}
                        checked={isChecked}
                        onChange={handleCheckboxChange}
                    />
                    <style jsx>{`
                        input[type="checkbox"]:checked::after {
                            content: "";
                            display: block;
                            position: absolute;
                            top: 50%;
                            left: 50%;
                            width: 6px;
                            height: 12px;
                            border: solid white;
                            border-width: 0 2px 2px 0;
                            transform: translate(-50%, -50%) rotate(45deg);
                        }
                    `}</style>
                </div>
                <div className="flex-1">
                    <p className="text-[13px] text-gray-600 leading-[1.3] mt-1.5">
                        Нажимая на кнопку, вы соглашаетесь <br /> с политикой обработки персональных данных
                    </p>
                    {checkboxError && (
                        <p className="text-red-500 text-sm mt-1">
                            {checkboxError}
                        </p>
                    )}
                </div>
            </div>
        </div>
    );
};

export default PlayerCountSelect;


File: RatingButtons.tsx
"use client";
import React from 'react';

interface RatingButtonsProps {
    onRate: (rating: string) => void;
}

const RatingButtons: React.FC<RatingButtonsProps> = ({ onRate }) => {
    return (
        <div className="rating-buttons-container flex justify-center mt-6">
            <button className="rating-button green mx-2" onClick={() => onRate('Отлично')}>
                ОТЛИЧНО!
            </button>
            <button className="rating-button yellow mx-2" onClick={() => onRate('Хорошо')}>
                ХОРОШО!
            </button>
            <button className="rating-button red mx-2" onClick={() => onRate('Ещё доработать')}>
                ЕЩЁ ДОРАБОТАТЬ!
            </button>
        </div>
    );
};

export default RatingButtons;

File: ReturnButton.tsx

"use client";
import React from 'react';
import { useRouter } from 'next/navigation';

const ReturnButton: React.FC = () => {
    const router = useRouter();

    return (
        <button
            className="flex justify-center items-centercursor-pointer transition-colors duration-200"
            onClick={() => router.push('/')}
        >
                <img
                        src="/House.svg"
                        alt="House icon"
                        className="h-12 w-12 cursor-pointer w-[120px] h-[120px]"
                    />
        </button>
    );
};

export default ReturnButton;
        

File: RulesContent.tsx
"use client";
import React from 'react';

const RulesContent: React.FC = () => {
    return (
        <div className="rules-page text-[#333333] rounded-3xl max-w-2xl pt-[50px] pl-[90px]">
            <h1 className="font-bold text-[58px] mb-6">Правила игры</h1>
            <p className="mb-6 text-bold text-[40px] whitespace-nowrap">
                Вас ждут <span className="font-semibold">7 раундов</span> с небольшими <br /> перерывами после 3 и 6 раундов.
            </p>

            <p className="mb-4 text-[23px] whitespace-nowrap">
                Почти во всех раундах, за редким исключением, будет по 6 вопросов. <br />
                После каждого вопроса вам в команде надо будет посовещаться <br />
                и написать ответ на бланках, которые будут лежать где-то рядом. <br />
                После каждого раунда надо сдать бланк.
            </p>
            <ul className="list-none text-left space-y-2 mb-8 text-[24px]">
                <li><span className="text-[#CC9F33]">1 раунд.</span> Разминка.</li>
                <li><span className="text-[#CC9F33]">2 раунд.</span> На логику.</li>
                <li><span className="text-[#CC9F33]">3 раунд.</span> Музыкальный.</li>
                <li><span className="text-[#CC9F33]">4 раунд.</span> Интерактивный.</li>
                <li><span className="text-[#CC9F33]">5 раунд.</span> Сюрприз.</li>
                <li><span className="text-[#CC9F33]">6 раунд.</span> Тематический.</li>
                <li><span className="text-[#CC9F33]">7 раунд.</span> Решающий.</li>
            </ul>
            <p className="text-base mb-6 text-[23px] whitespace-nowrap">
                Если у вас будут появляться вопросы перед <br />
                игрой или в течение её, не стесняйтесь задавать <br />
                их нашим помощникам.
            </p>
            <div className="font-semibold text-[21px]">
                Ни в коем случае <span className="text-[#CC9F33] whitespace-nowrap">нельзя забывать вкусно есть <br /> и пить во время игры!</span> За этот пункт вашего досуга отвечают наши партнерские крутые бары.
            </div>
        </div>
    );
};

export default RulesContent;


File: StartButton.tsx
"use client";
import React from 'react';
import Link from 'next/link';

const StartButton: React.FC = () => {
    return (
        <Link href="/game">
            <button className="start-button text-[#f4c542] text-[70px] font-bold border-none cursor-pointer transition-colors duration-200 hover:text-[#d2a636]">
                ИГРА
            </button>
        </Link>
    );
};

export default StartButton;

File: TeamRatingTable copy.tsx

"use client";
import React from 'react';

interface Team {
    name: string;
    round1: number;
    round2: number;
    round3: number;
    round4: number;
    round5: number;
    round6: number;
    round7: number;
    place: number;
    total: number;
}

const testData: Team[] = [
    { name: 'Команда А', round1: 10, round2: 15, round3: 20, round4: 25, round5: 30, round6: 35, round7: 40, place: 1, total: 175 },
    { name: 'Команда Б', round1: 9, round2: 14, round3: 19, round4: 24, round5: 29, round6: 34, round7: 39, place: 2, total: 168 },
    { name: 'Команда В', round1: 8, round2: 13, round3: 18, round4: 23, round5: 28, round6: 33, round7: 38, place: 3, total: 161 },
    { name: 'Команда Г', round1: 7, round2: 12, round3: 17, round4: 22, round5: 27, round6: 32, round7: 37, place: 4, total: 154 },
    { name: 'Команда Д', round1: 6, round2: 11, round3: 16, round4: 21, round5: 26, round6: 31, round7: 36, place: 5, total: 147 },
    { name: 'Команда А', round1: 10, round2: 15, round3: 20, round4: 25, round5: 30, round6: 35, round7: 40, place: 1, total: 175 },
    { name: 'Команда Б', round1: 9, round2: 14, round3: 19, round4: 24, round5: 29, round6: 34, round7: 39, place: 2, total: 168 },
    { name: 'Команда В', round1: 8, round2: 13, round3: 18, round4: 23, round5: 28, round6: 33, round7: 38, place: 3, total: 161 },
    { name: 'Команда Г', round1: 7, round2: 12, round3: 17, round4: 22, round5: 27, round6: 32, round7: 37, place: 4, total: 154 },
    { name: 'Команда Д', round1: 6, round2: 11, round3: 16, round4: 21, round5: 26, round6: 31, round7: 36, place: 5, total: 147 },
];

const TeamRatingTable: React.FC = () => {
    return (
        <div className="w-[88%] mx-auto bg-[#CC9F33] rounded-[20px] overflow-hidden mt-2 mb-5">
            <table className="min-w-full text-black">
                <thead>
                    <tr className='h-[76px] font-light'>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Команда</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Раунд 1</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Раунд 2</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Раунд 3</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Раунд 4</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Раунд 5</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Раунд 6</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Раунд 7</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-30">Место</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-l border-gray-30">Итого</th>
                    </tr>
                </thead>
                <tbody>
                    {testData.map((team, index) => (
                        <tr
                            key={index}
                            className={`${
                                index % 2 === 0 ? 'bg-white' : 'bg-[#FFF5E1]'
                            } hover:bg-gray-200 transition-colors duration-200 font-regular text-[26px] `}
                        >
                            <td className="border px-4 py-3 pl-9 h-[82px] w-[340px]">{team.name}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px text-left">{team.round1}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px] text-left">{team.round2}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px] text-left">{team.round3}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px] text-left">{team.round4}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px] text-left">{team.round5}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px] text-left">{team.round6}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px] text-left">{team.round7}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px] text-left">{team.place}</td>
                            <td className="border px-4 py-3 pl-9 h-[76px] text-left">{team.total}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default TeamRatingTable;


File: TeamResultTable.tsx
"use client";
import React from 'react';

interface Team {
    name: string;
    round1: number;
    round2: number;
    round3: number;
    round4: number;
    round5: number;
    round6: number;
    round7: number;
    place: number;
    total: number;
}

const testData: Team[] = [
    { name: 'Команда А', round1: 10, round2: 15, round3: 20, round4: 25, round5: 30, round6: 35, round7: 40, place: 1, total: 175 },
    { name: 'Команда Б', round1: 9, round2: 14, round3: 19, round4: 24, round5: 29, round6: 34, round7: 39, place: 2, total: 168 },
    { name: 'Команда В', round1: 8, round2: 13, round3: 18, round4: 23, round5: 28, round6: 33, round7: 38, place: 3, total: 161 },
    { name: 'Команда Г', round1: 7, round2: 12, round3: 17, round4: 22, round5: 27, round6: 32, round7: 37, place: 4, total: 154 },
    { name: 'Команда Д', round1: 6, round2: 11, round3: 16, round4: 21, round5: 26, round6: 31, round7: 36, place: 5, total: 147 },
    { name: 'Команда Е', round1: 5, round2: 10, round3: 15, round4: 20, round5: 25, round6: 30, round7: 35, place: 6, total: 140 },
    { name: 'Команда Ж', round1: 4, round2: 9, round3: 14, round4: 19, round5: 24, round6: 29, round7: 34, place: 7, total: 133 },
    { name: 'Команда З', round1: 3, round2: 8, round3: 13, round4: 18, round5: 23, round6: 28, round7: 33, place: 8, total: 126 },
    { name: 'Команда И', round1: 2, round2: 7, round3: 12, round4: 17, round5: 22, round6: 27, round7: 32, place: 9, total: 119 },
    { name: 'Команда К', round1: 1, round2: 6, round3: 11, round4: 16, round5: 21, round6: 26, round7: 31, place: 10, total: 112 },
];

const TeamResultTable: React.FC = () => {
    return (
        <div className="w-[88%] mx-auto bg-[#CC9F33] rounded-[20px] overflow-hidden mt-2 mb-5">
            <table className="min-w-full text-black">
                <thead>
                    <tr className='h-[76px] font-light'>
                        {/* Новая колонка "Место" */}
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Место</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Команда</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Итого</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Раунд 1</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Раунд 2</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Раунд 3</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Раунд 4</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Раунд 5</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Раунд 6</th>
                        <th className="px-4 pl-8 py-3 text-white text-[26px] font-light text-left border-r border-gray-300">Раунд 7</th>
                    </tr>
                </thead>
                <tbody>
                    {testData.map((team, index) => (
                        <tr
                            key={index}
                            className={`${
                                index % 2 === 0 ? 'bg-white' : 'bg-[#FFF5E1]'
                            } hover:bg-gray-200 transition-colors duration-200 font-regular text-[26px] `}
                        >
                            {/* Новая ячейка "Место" */}
                            <td className="border px-4 py-3 pl-8 w-[80px]">{index + 1}</td>
                            <td className="border px-4 py-3 pl-8 w-[340px]">{team.name}</td>
                            <td className="border px-4 py-3 pl-8 h-[80px] text-left">{team.total}</td>
                            <td className="border px-4 py-3 pl-8 h-[80px] text-left">{team.round1}</td>
                            <td className="border px-4 py-3 pl-8 h-[80px] text-left">{team.round2}</td>
                            <td className="border px-4 py-3 pl-8 h-[80px] text-left">{team.round3}</td>
                            <td className="border px-4 py-3 pl-8 h-[80px] text-left">{team.round4}</td>
                            <td className="border px-4 py-3 pl-8 h-[80px] text-left">{team.round5}</td>
                            <td className="border px-4 py-3 pl-8 h-[80px] text-left">{team.round6}</td>
                            <td className="border px-4 py-3 pl-8 h-[80px] text-left">{team.round7}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default TeamResultTable;


File: WinPage.tsx
"use client";
import React from 'react';
import ReturnButton from './ReturnButton';

interface WinPageProps {
    winnerName: string;
}

const WinPage: React.FC<WinPageProps> = ({ winnerName }) => {
    return (
        <div className="win-page bg-[#1c2536] text-[#f4c542] rounded-2xl p-10 text-center relative w-full h-full flex flex-col justify-center items-center">
            <h1 className="congratulations-text text-4xl font-bold mb-4">Поздравляем!</h1>
            <p className="place-text text-2xl">Победитель: {winnerName}</p>
            {/* Декоративные элементы */}
            <div className="absolute top-4 left-4">
                {/* Добавьте SVG или изображения */}
            </div>
            <div className="absolute bottom-4 right-4">
                {/* Добавьте SVG или изображения */}
            </div>
            <div className="mt-6">
                <ReturnButton />
            </div>
        </div>
    );
};

export default WinPage;

File: page.tsx
"use client";
import React from 'react';
import Contacts from '../components/Contacts';

const ContactPage: React.FC = () => {
    return (
        <div className="w-screen h-screen bg-[#1c2536] flex items-center justify-center">
            <Contacts />
        </div>
    );
};

export default ContactPage;

File: page.tsx
"use client";
import React from 'react';
import { useRouter } from 'next/navigation';


const HelloPage: React.FC = () => {
    const router = useRouter();

    const handleHomeClick = () => {
        router.push('/');
    };

    return (
        <div
            className="relative w-full h-screen bg-cover bg-center text-white"
            style={{ backgroundImage: `url('/First_screen.jpg')` }}
        >
            {/* Upper pattern overlay */}
            <div className="absolute top-0 left-0 w-full h-[100px] bg-pattern"></div>

            {/* Team name */}
            <div className="flex justify-center items-center h-full">
                <h1 className="text-[100px] font-bold">Название команды</h1>
            </div>

            {/* Bottom layout with empty space, centered house icon, and table number */}
            <div className="absolute bottom-10 flex justify-between w-full px-10 items-center">
                {/* Empty left space */}
                <div className="w-1/3"></div>

                {/* House icon centered */}
                <div className="w-1/3 flex">
                    <div className="relative">
                        <div className="absolute backdrop-blur-[3px] w-[100px] h-[100px]"></div>
                        <img
                            src="/House.svg"
                            alt="House icon"
                            className="h-[100px] w-[100px] cursor-pointer relative z-10"
                            onClick={handleHomeClick}
                        />
                    </div>
                </div>

                {/* Table number on the right */}
                <div className="text-[#f4c542] text-[67px] leading-[35px] mt-3 text-right">
                    5 <br />
                    <span className="text-[30px]">стол</span>
                </div>
            </div>
        </div>
    );
};

export default HelloPage;


File: page.tsx
"use client";
import React, { useState } from 'react';
import Modal from '../components/Modal';
import LotteryForm from '../components/LotteryForm';
import PlayerCountSelect from '../components/PlayerCountSelect';
import PaymentOptions from '../components/PaymentOptions';
import CardInputForm from '../components/CardInputForm';
import ReturnButton from '../components/ReturnButton';

const LotteryPage: React.FC = () => {
    const [isModalOpen, setIsModalOpen] = useState(true);
    const [step, setStep] = useState(1);
    const [formData, setFormData] = useState<any>({});

    const handleNext = (data: any) => {
        setFormData({ ...formData, ...data });
        setStep(step + 1);
    };

    const handleClose = () => {
        setIsModalOpen(false);
    };

    return (
        <div className="w-screen h-screen bg-[#1c2536] text-white flex flex-col">
            <div className="flex-grow container mx-auto p-5">
                {isModalOpen && (
                    <Modal isOpen={isModalOpen} onClose={handleClose}>
                        {step === 1 && <LotteryForm onNext={handleNext} />}
                        {step === 2 && <PlayerCountSelect onNext={handleNext} />}
                        {step === 3 && (
                            <PaymentOptions
                                amount={formData.playerCount * 100 || 100} // Пример суммы
                                onNext={() => setStep(step + 1)} pricePerPlayer={0} onBack={function (): void {
                                    throw new Error('Function not implemented.');
                                } }                            />
                        )}
                    </Modal>
                )}
            </div>
            <div className="p-5">
                <ReturnButton />
            </div>
        </div>
    );
};

export default LotteryPage;

File: page.tsx
"use client";
import React, { useState, useRef } from 'react';
import { FaHome, FaChevronLeft, FaChevronRight } from 'react-icons/fa';
import { useRouter } from 'next/navigation';

const categories = [
    'Салаты', 
    'Супы', 
    'Горячее', 
    'Десерты', 
    'Закуски', 
    'Напитки', 
    'Гарниры', 
    'Соусы', 
    'Пицца', 
    'Паста', 
    'Бургеры', 
    'Сэндвичи', 
    'Морепродукты', 
    'Вегетарианские блюда', 
    'Суши и роллы', 
    'Блины', 
    'Завтраки', 
    'Гриль', 
    'Специальные предложения', 
    'Детское меню'
];

interface Dish {
    name: string;
    category: string;
    price: number;
    image: string;
    description: string;
}

const commonImage = 'https://img.freepik.com/premium-photo/traditional-italian-pasta-carbonara-with-bacon-parmesan-egg-pepper-dark-background-top-view_166116-5396.jpg';

const dishes: Dish[] = [
    // Салаты (12 блюд)
    // Салаты (примерно 24 блюда)
    { name: 'Салат Оливье', category: 'Салаты', price: 700, image: commonImage, description: 'Классический русский салат с овощами и майонезом' },
    { name: 'Цезарь с курицей', category: 'Салаты', price: 750, image: commonImage, description: 'Салат с курицей, пармезаном и соусом цезарь' },
    { name: 'Греческий салат', category: 'Салаты', price: 720, image: commonImage, description: 'Салат с огурцами, помидорами, оливками и фетой' },
    // Добавляем новые блюда
    { name: 'Салат с креветками', category: 'Салаты', price: 800, image: commonImage, description: 'Салат с креветками и авокадо' },
    { name: 'Салат с ростбифом', category: 'Салаты', price: 850, image: commonImage, description: 'Салат с тонко нарезанной говядиной' },
    { name: 'Салат из свежих овощей', category: 'Салаты', price: 650, image: commonImage, description: 'Лёгкий салат из сезонных овощей' },
    { name: 'Салат Капрезе', category: 'Салаты', price: 700, image: commonImage, description: 'Помидоры с моцареллой и базиликом' },
    { name: 'Салат с тунцом', category: 'Салаты', price: 770, image: commonImage, description: 'Салат с тунцом и яйцом' },
    { name: 'Салат Нисуаз', category: 'Салаты', price: 780, image: commonImage, description: 'Салат с анчоусами и оливками' },
    { name: 'Салат Чука', category: 'Салаты', price: 720, image: commonImage, description: 'Салат из морских водорослей с ореховым соусом' },
    { name: 'Салат с кальмарами', category: 'Салаты', price: 800, image: commonImage, description: 'Салат с кальмарами и овощами' },
    { name: 'Салат Вальдорф', category: 'Салаты', price: 750, image: commonImage, description: 'Салат с яблоками, орехами и сельдереем' },

    // Супы (примерно 24 блюда)
    { name: 'Борщ', category: 'Супы', price: 600, image: commonImage, description: 'Традиционный русский суп с мясом и свеклой' },
    { name: 'Крем-суп из грибов', category: 'Супы', price: 650, image: commonImage, description: 'Нежный суп с шампиньонами и сливками' },
    { name: 'Солянка', category: 'Супы', price: 700, image: commonImage, description: 'Суп с разными видами мяса и оливками' },
    { name: 'Уха', category: 'Супы', price: 750, image: commonImage, description: 'Рыбный суп с овощами' },
    { name: 'Том Ям', category: 'Супы', price: 800, image: commonImage, description: 'Острый тайский суп с морепродуктами' },
    { name: 'Куриный бульон', category: 'Супы', price: 550, image: commonImage, description: 'Лёгкий бульон с курицей и овощами' },
    { name: 'Сырный крем-суп', category: 'Супы', price: 680, image: commonImage, description: 'Суп с плавленым сыром и гренками' },
    { name: 'Минестроне', category: 'Супы', price: 650, image: commonImage, description: 'Итальянский овощной суп' },
    { name: 'Харчо', category: 'Супы', price: 700, image: commonImage, description: 'Грузинский острый суп с говядиной и рисом' },
    { name: 'Окрошка', category: 'Супы', price: 600, image: commonImage, description: 'Холодный суп на квасе с овощами' },
    { name: 'Гаспачо', category: 'Супы', price: 650, image: commonImage, description: 'Испанский холодный томатный суп' },
    { name: 'Крем-суп из тыквы', category: 'Супы', price: 680, image: commonImage, description: 'Нежный суп из тыквы со сливками' },
    { name: 'Суп Лапша', category: 'Супы', price: 600, image: commonImage, description: 'Куриный суп с домашней лапшой' },
    { name: 'Рассольник', category: 'Супы', price: 650, image: commonImage, description: 'Суп с солеными огурцами и перловкой' },
    { name: 'Щи', category: 'Супы', price: 600, image: commonImage, description: 'Капустный суп с мясом' },
    { name: 'Суп из морепродуктов', category: 'Супы', price: 850, image: commonImage, description: 'Суп с креветками, мидиями и кальмарами' },
    { name: 'Чечевичный суп', category: 'Супы', price: 650, image: commonImage, description: 'Суп из красной чечевицы с овощами' },
    { name: 'Суп Пюре из брокколи', category: 'Супы', price: 680, image: commonImage, description: 'Кремовый суп из брокколи' },
    { name: 'Суп с фрикадельками', category: 'Супы', price: 650, image: commonImage, description: 'Суп с мясными фрикадельками и овощами' },
    { name: 'Крем-суп из шпината', category: 'Супы', price: 670, image: commonImage, description: 'Нежный суп из шпината со сливками' },
    { name: 'Суп Рамен', category: 'Супы', price: 800, image: commonImage, description: 'Японский суп с лапшой и мясом' },
    { name: 'Суп Фо Бо', category: 'Супы', price: 850, image: commonImage, description: 'Вьетнамский суп с говядиной и лапшой' },
    { name: 'Суп Мисо', category: 'Супы', price: 600, image: commonImage, description: 'Японский суп с тофу и водорослями' },
    { name: 'Суп Гуляш', category: 'Супы', price: 700, image: commonImage, description: 'Венгерский густой суп с говядиной' },

    // Горячее (примерно 24 блюда)
    { name: 'Паста Карбонара', category: 'Горячее', price: 700, image: commonImage, description: 'Нежная паста с беконом и пармезаном' },
    { name: 'Стейк Рибай', category: 'Горячее', price: 1500, image: commonImage, description: 'Сочный стейк из мраморной говядины' },
    { name: 'Лазанья', category: 'Горячее', price: 800, image: commonImage, description: 'Паста с мясным соусом и сыром' },
    { name: 'Куриное филе на гриле', category: 'Горячее', price: 750, image: commonImage, description: 'Курица на гриле с овощами' },
    { name: 'Жаркое по-домашнему', category: 'Горячее', price: 850, image: commonImage, description: 'Говядина с картофелем и овощами' },
    { name: 'Семга на гриле', category: 'Горячее', price: 1300, image: commonImage, description: 'Филе семги на гриле с лимоном' },
    { name: 'Утка по-пекински', category: 'Горячее', price: 1400, image: commonImage, description: 'Хрустящая утка с соусом Хойсин' },
    { name: 'Плов с бараниной', category: 'Горячее', price: 900, image: commonImage, description: 'Ароматный плов с бараниной и специями' },
    { name: 'Свинные ребра BBQ', category: 'Горячее', price: 1200, image: commonImage, description: 'Ребра в соусе барбекю' },
    { name: 'Шашлык из курицы', category: 'Горячее', price: 800, image: commonImage, description: 'Куриный шашлык с луком' },
    { name: 'Котлета по-киевски', category: 'Горячее', price: 750, image: commonImage, description: 'Куриная котлета с маслом внутри' },
    { name: 'Филе Миньон', category: 'Горячее', price: 1600, image: commonImage, description: 'Нежное говяжье филе' },
    { name: 'Гуляш из говядины', category: 'Горячее', price: 850, image: commonImage, description: 'Тушеная говядина в соусе' },
    { name: 'Кебаб из баранины', category: 'Горячее', price: 900, image: commonImage, description: 'Баранина на шампуре с специями' },
    { name: 'Мусака', category: 'Горячее', price: 800, image: commonImage, description: 'Греческая запеканка с баклажанами и мясом' },
    { name: 'Рататуй', category: 'Горячее', price: 700, image: commonImage, description: 'Овощное рагу из баклажанов, кабачков и томатов' },
    { name: 'Оссо Буко', category: 'Горячее', price: 1400, image: commonImage, description: 'Тушеная телячья голяшка' },
    { name: 'Паэлья с морепродуктами', category: 'Горячее', price: 1300, image: commonImage, description: 'Рис с морепродуктами и шафраном' },
    { name: 'Томленая говядина с пюре', category: 'Горячее', price: 900, image: commonImage, description: 'Говядина, тушеная в соусе, с картофельным пюре' },
    { name: 'Телячьи медальоны', category: 'Горячее', price: 1200, image: commonImage, description: 'Медальоны из телятины с соусом' },
    { name: 'Рыба по-королевски', category: 'Горячее', price: 1100, image: commonImage, description: 'Запеченная рыба с овощами и сыром' },
    { name: 'Курица Терияки', category: 'Горячее', price: 800, image: commonImage, description: 'Курица в соусе терияки с рисом' },
    { name: 'Сибас на гриле', category: 'Горячее', price: 1200, image: commonImage, description: 'Филе сибаса на гриле с травами' },
    { name: 'Жареные креветки с чесноком', category: 'Горячее', price: 950, image: commonImage, description: 'Креветки в чесночном соусе' },

    // Десерты (примерно 24 блюда)
    { name: 'Тирамису', category: 'Десерты', price: 500, image: commonImage, description: 'Итальянский десерт с маскарпоне и кофе' },
    { name: 'Чизкейк', category: 'Десерты', price: 550, image: commonImage, description: 'Нежный десерт с сыром и ягодами' },
    { name: 'Шоколадный фондан', category: 'Десерты', price: 600, image: commonImage, description: 'Кекс с жидким шоколадом внутри' },
    { name: 'Мороженое ассорти', category: 'Десерты', price: 400, image: commonImage, description: 'Три шарика мороженого на выбор' },
    { name: 'Яблочный штрудель', category: 'Десерты', price: 450, image: commonImage, description: 'Тёплый штрудель с яблоками и корицей' },
    { name: 'Панна Котта', category: 'Десерты', price: 500, image: commonImage, description: 'Итальянский десерт со сливками и ванилью' },
    { name: 'Крем-брюле', category: 'Десерты', price: 520, image: commonImage, description: 'Десерт с карамельной корочкой' },
    { name: 'Эклеры', category: 'Десерты', price: 380, image: commonImage, description: 'Заварные пирожные с кремом' },
    { name: 'Тарталетка с фруктами', category: 'Десерты', price: 450, image: commonImage, description: 'Хрустящая тарталетка с кремом и фруктами' },
    { name: 'Макарони', category: 'Десерты', price: 300, image: commonImage, description: 'Французские миндальные пирожные' },
    { name: 'Медовик', category: 'Десерты', price: 480, image: commonImage, description: 'Слоёный торт с мёдом' },
    { name: 'Наполеон', category: 'Десерты', price: 500, image: commonImage, description: 'Слоёный торт с кремом' },
    { name: 'Фруктовый салат', category: 'Десерты', price: 420, image: commonImage, description: 'Ассорти из свежих фруктов' },
    { name: 'Сырники со сметаной', category: 'Десерты', price: 450, image: commonImage, description: 'Творожные сырники с сметаной' },
    { name: 'Мусс из белого шоколада', category: 'Десерты', price: 550, image: commonImage, description: 'Нежный мусс с ягодным соусом' },
    { name: 'Брауни с мороженым', category: 'Десерты', price: 600, image: commonImage, description: 'Шоколадный пирог с шариком мороженого' },
    { name: 'Тарт Татен', category: 'Десерты', price: 500, image: commonImage, description: 'Перевернутый пирог с яблоками' },
    { name: 'Профитроли', category: 'Десерты', price: 480, image: commonImage, description: 'Заварные пирожные с кремом и шоколадом' },
    { name: 'Фисташковый торт', category: 'Десерты', price: 550, image: commonImage, description: 'Торт с фисташковым кремом' },
    { name: 'Клубничный сорбет', category: 'Десерты', price: 400, image: commonImage, description: 'Освежающий сорбет из клубники' },
    { name: 'Тирамису с ягодами', category: 'Десерты', price: 550, image: commonImage, description: 'Тирамису с добавлением свежих ягод' },
    { name: 'Чизкейк Нью-Йорк', category: 'Десерты', price: 580, image: commonImage, description: 'Классический чизкейк' },
    { name: 'Блинчики с шоколадом', category: 'Десерты', price: 420, image: commonImage, description: 'Тонкие блинчики с шоколадным соусом' },
    { name: 'Мороженое фламбе', category: 'Десерты', price: 650, image: commonImage, description: 'Мороженое с фруктами, подожженное ромом' },

    // Закуски (примерно 24 блюда)
    { name: 'Брускетта с томатами', category: 'Закуски', price: 400, image: commonImage, description: 'Хлеб с томатами и базиликом' },
    { name: 'Карпаччо из говядины', category: 'Закуски', price: 850, image: commonImage, description: 'Тонко нарезанная говядина с соусом' },
    { name: 'Сырная тарелка', category: 'Закуски', price: 900, image: commonImage, description: 'Ассорти из европейских сыров' },
    { name: 'Оливки и маслины', category: 'Закуски', price: 350, image: commonImage, description: 'Ассорти из оливок и маслин' },
    { name: 'Куриные крылышки BBQ', category: 'Закуски', price: 650, image: commonImage, description: 'Крылышки в соусе барбекю' },
    { name: 'Хумус с лепешками', category: 'Закуски', price: 500, image: commonImage, description: 'Нутовый хумус с свежими лепешками' },
    { name: 'Креветки темпура', category: 'Закуски', price: 800, image: commonImage, description: 'Креветки в хрустящем кляре' },
    { name: 'Мидии в сливочном соусе', category: 'Закуски', price: 850, image: commonImage, description: 'Мидии, приготовленные в соусе' },
    { name: 'Паштет из утки', category: 'Закуски', price: 700, image: commonImage, description: 'Домашний паштет с хлебом' },
    { name: 'Жюльен с грибами', category: 'Закуски', price: 550, image: commonImage, description: 'Грибы в сливочном соусе под сыром' },
    { name: 'Рулетики из баклажанов', category: 'Закуски', price: 600, image: commonImage, description: 'Баклажаны с начинкой из сыра' },
    { name: 'Кальмары фри', category: 'Закуски', price: 750, image: commonImage, description: 'Кольца кальмаров во фритюре' },
    { name: 'Спринг-роллы с овощами', category: 'Закуски', price: 500, image: commonImage, description: 'Рулетики с овощами и соусом' },
    { name: 'Фалафель', category: 'Закуски', price: 450, image: commonImage, description: 'Шарики из нута с соусом' },
    { name: 'Тартар из лосося', category: 'Закуски', price: 850, image: commonImage, description: 'Свежий лосось с авокадо' },
    { name: 'Антипасти', category: 'Закуски', price: 900, image: commonImage, description: 'Ассорти из итальянских закусок' },
    { name: 'Печеный камамбер', category: 'Закуски', price: 800, image: commonImage, description: 'Запеченный сыр с хлебом' },
    { name: 'Куриные наггетсы', category: 'Закуски', price: 550, image: commonImage, description: 'Кусочки курицы в кляре' },
    { name: 'Гренки с чесноком', category: 'Закуски', price: 300, image: commonImage, description: 'Хрустящие гренки с чесноком' },
    { name: 'Мясное ассорти', category: 'Закуски', price: 950, image: commonImage, description: 'Ассорти из разных видов мяса' },
    { name: 'Куриные шашлычки', category: 'Закуски', price: 650, image: commonImage, description: 'Мини-шашлыки из курицы' },
    { name: 'Севиче из сибаса', category: 'Закуски', price: 800, image: commonImage, description: 'Маринованный сибас с лаймом' },
    { name: 'Паштет из куриной печени', category: 'Закуски', price: 600, image: commonImage, description: 'Паштет с тостами' },
    { name: 'Бастурма', category: 'Закуски', price: 700, image: commonImage, description: 'Вяленое мясо по-армянски' },

    // Напитки (примерно 24 блюда)
    { name: 'Эспрессо', category: 'Напитки', price: 200, image: commonImage, description: 'Крепкий кофе' },
    { name: 'Капучино', category: 'Напитки', price: 250, image: commonImage, description: 'Кофе с молочной пеной' },
    { name: 'Латте', category: 'Напитки', price: 270, image: commonImage, description: 'Кофе с молоком' },
    { name: 'Чай чёрный', category: 'Напитки', price: 150, image: commonImage, description: 'Классический чёрный чай' },
    { name: 'Чай зелёный', category: 'Напитки', price: 150, image: commonImage, description: 'Зелёный чай' },
    { name: 'Свежевыжатый сок', category: 'Напитки', price: 300, image: commonImage, description: 'Сок из свежих фруктов' },
    { name: 'Мохито безалкогольный', category: 'Напитки', price: 350, image: commonImage, description: 'Освежающий напиток с мятой и лаймом' },
    { name: 'Лимонад домашний', category: 'Напитки', price: 250, image: commonImage, description: 'Лимонад с натуральным лимоном' },
    { name: 'Горячий шоколад', category: 'Напитки', price: 300, image: commonImage, description: 'Напиток из топлёного шоколада' },
    { name: 'Молочный коктейль', category: 'Напитки', price: 320, image: commonImage, description: 'Напиток из молока и мороженого' },
    { name: 'Минеральная вода', category: 'Напитки', price: 150, image: commonImage, description: 'Газированная или негазированная вода' },
    { name: 'Айран', category: 'Напитки', price: 200, image: commonImage, description: 'Кисломолочный напиток' },
    { name: 'Фруктовый смузи', category: 'Напитки', price: 350, image: commonImage, description: 'Смузи из свежих фруктов' },
    { name: 'Чай каркаде', category: 'Напитки', price: 180, image: commonImage, description: 'Чай из лепестков гибискуса' },
    { name: 'Какао', category: 'Напитки', price: 280, image: commonImage, description: 'Горячий напиток с какао' },
    { name: 'Эспрессо макиато', category: 'Напитки', price: 220, image: commonImage, description: 'Эспрессо с каплей молока' },
    { name: 'Раф кофе', category: 'Напитки', price: 300, image: commonImage, description: 'Кофе со сливками и ванилью' },
    { name: 'Фраппе', category: 'Напитки', price: 320, image: commonImage, description: 'Холодный кофейный напиток' },
    { name: 'Матча латте', category: 'Напитки', price: 350, image: commonImage, description: 'Зелёный чай матча с молоком' },
    { name: 'Имбирный чай', category: 'Напитки', price: 200, image: commonImage, description: 'Чай с имбирём и лимоном' },
    { name: 'Компот', category: 'Напитки', price: 150, image: commonImage, description: 'Напиток из сухофруктов' },
    { name: 'Морс', category: 'Напитки', price: 180, image: commonImage, description: 'Напиток из ягод' },
    { name: 'Глинтвейн безалкогольный', category: 'Напитки', price: 380, image: commonImage, description: 'Горячий напиток с пряностями' },
    { name: 'Травяной чай', category: 'Напитки', price: 180, image: commonImage, description: 'Чай из трав' },

    // Гарниры (примерно 24 блюда)
    { name: 'Картофель фри', category: 'Гарниры', price: 200, image: commonImage, description: 'Хрустящий картофель фри' },
    { name: 'Рис отварной', category: 'Гарниры', price: 150, image: commonImage, description: 'Отварной рис' },
    { name: 'Овощи гриль', category: 'Гарниры', price: 300, image: commonImage, description: 'Овощи, приготовленные на гриле' },
    { name: 'Картофельное пюре', category: 'Гарниры', price: 180, image: commonImage, description: 'Нежное пюре из картофеля' },
    { name: 'Спагетти', category: 'Гарниры', price: 220, image: commonImage, description: 'Отварные спагетти с маслом' },
    { name: 'Гречка', category: 'Гарниры', price: 150, image: commonImage, description: 'Гречневая каша' },
    { name: 'Соте из овощей', category: 'Гарниры', price: 280, image: commonImage, description: 'Тушеные овощи в соусе' },
    { name: 'Кус-кус', category: 'Гарниры', price: 200, image: commonImage, description: 'Зерновой гарнир из пшеницы' },
    { name: 'Картофель по-деревенски', category: 'Гарниры', price: 220, image: commonImage, description: 'Запеченный картофель с кожурой' },
    { name: 'Салат из свежих овощей', category: 'Гарниры', price: 250, image: commonImage, description: 'Лёгкий овощной салат' },
    { name: 'Кукуруза гриль', category: 'Гарниры', price: 200, image: commonImage, description: 'Кукуруза, приготовленная на гриле' },
    { name: 'Брокколи на пару', category: 'Гарниры', price: 250, image: commonImage, description: 'Брокколи, приготовленная на пару' },
    { name: 'Сладкий картофель фри', category: 'Гарниры', price: 220, image: commonImage, description: 'Фри из батата' },
    { name: 'Полента', category: 'Гарниры', price: 200, image: commonImage, description: 'Каша из кукурузной муки' },
    { name: 'Фасоль в томате', category: 'Гарниры', price: 230, image: commonImage, description: 'Фасоль, тушеная в томатном соусе' },
    { name: 'Шпинат со сливками', category: 'Гарниры', price: 280, image: commonImage, description: 'Тушеный шпинат в сливочном соусе' },
    { name: 'Цветная капуста гриль', category: 'Гарниры', price: 260, image: commonImage, description: 'Цветная капуста на гриле' },
    { name: 'Рататуй', category: 'Гарниры', price: 300, image: commonImage, description: 'Овощное блюдо из баклажанов, кабачков и томатов' },
    { name: 'Микс салатных листьев', category: 'Гарниры', price: 220, image: commonImage, description: 'Смесь различных салатных листьев' },
    { name: 'Жареные грибы', category: 'Гарниры', price: 280, image: commonImage, description: 'Грибы, обжаренные с луком' },
    { name: 'Пюре из батата', category: 'Гарниры', price: 200, image: commonImage, description: 'Нежное пюре из батата' },
    { name: 'Булгур', category: 'Гарниры', price: 180, image: commonImage, description: 'Отварной булгур' },
    { name: 'Овощи темпура', category: 'Гарниры', price: 300, image: commonImage, description: 'Овощи в хрустящем кляре' },
    { name: 'Запеченная тыква', category: 'Гарниры', price: 250, image: commonImage, description: 'Тыква, запеченная с травами' },

];

const MenuPage: React.FC = () => {
    const [activeCategory, setActiveCategory] = useState(categories[0]);
    const router = useRouter();
    const scrollContainerRef = useRef<HTMLDivElement>(null);

    const filteredDishes = dishes.filter((dish) => dish.category === activeCategory);

    const scrollLeft = () => {
        if (scrollContainerRef.current) {
            scrollContainerRef.current.scrollBy({ left: -200, behavior: 'smooth' });
        }
    };

    const scrollRight = () => {
        if (scrollContainerRef.current) {
            scrollContainerRef.current.scrollBy({ left: 200, behavior: 'smooth' });
        }
    };

    return (
        <div className="w-screen bg-[#1B2A46] text-white flex flex-col min-h-screen">
            <div className='w-[81%] mx-auto'>
                {/* Хедер */}
                <h1 className="text-[60px] font-bold text-left mt-10">Меню ресторана</h1>

                {/* Контейнер для кнопок прокрутки и навбара категорий */}
                <div className="flex items-center mt-5">
                    {/* Левая кнопка прокрутки */}
                    <button
                        className="mr-3 bg-[#D4AF37] text-[#001833] p-2 rounded-full shadow-md hover:bg-[#c19c29] focus:outline-none"
                        onClick={scrollLeft}
                        aria-label="Прокрутить влево"
                    >
                        <FaChevronLeft />
                    </button>

                    {/* Навбар категорий */}
                    <div className="flex-1 bg-white py-2 px-5 rounded-[10px] overflow-hidden"> 
                        <div
                            ref={scrollContainerRef}
                            className="flex space-x-2 overflow-x-auto hide-scrollbar"
                        >
                            {categories.map((category) => (
                                <button
                                    key={category}
                                    className={`flex-shrink-0 h-12 px-4 rounded-lg font-semibold text-lg transition-colors duration-200 ${
                                        activeCategory === category
                                            ? 'bg-[#D4AF37] text-[#001833]'
                                            : 'bg-white text-[#001833] hover:bg-[#f0e6d2]'
                                    }`}
                                    onClick={() => setActiveCategory(category)}
                                    aria-pressed={activeCategory === category}
                                >
                                    {category}
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Правая кнопка прокрутки */}
                    <button
                        className="ml-3 bg-[#D4AF37] text-[#001833] p-2 rounded-full shadow-md hover:bg-[#c19c29] focus:outline-none"
                        onClick={scrollRight}
                        aria-label="Прокрутить вправо"
                    >
                        <FaChevronRight />
                    </button>
                </div>

                {/* Сетка блюд */}
                <main className="flex-grow p-3 overflow-y-auto scrollbar-thin scrollbar-thumb-[#D4AF37] scrollbar-track-transparent mt-2 bg-[#1B2A46]">
                    <div className="flex flex-wrap gap-6 justify-center">
                        {filteredDishes.map((dish) => (
                            <div key={dish.name} className="hover:shadow-2xl duration-300 transform hover:scale-105" style={{ width: '260px'}}>
                                <div className="relative">
                                    <img src={dish.image} alt={dish.name} className="w-full h-[200px] object-cover rounded-xl" />
                                </div>
                                <div className="py-4 font-bold">
                                       <div className="rounded-md text-lg text-[32px]">
                                        {dish.price} ₽
                                    </div>
                                    <h2 className="text-left text-lg font-medium">{dish.name}</h2>
                                    <p className="text-left text-sm line-clamp-2">{dish.description}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                </main>


                {/* Нижняя кнопка "Домой" */}
                <footer className="flex justify-center mt-14 mb-10">
                    <button
                        className="flex justify-center items-center w-12 h-12 rounded-full transition-transform duration-200 focus:outline-none w-[100px]"
                        onClick={() => router.push('/')}
                        aria-label="Домой"
                    >
                        <img src="House.svg" alt="Info icon" />
                    </button>
                </footer>
            </div>
        </div>
    );
};

export default MenuPage;


File: page.tsx

"use client";
import React from 'react';
import TeamRatingTable from '../components/TeamResultTable';
import ReturnButton from '../components/ReturnButton';

const RatingPage: React.FC = () => {
    return (
        <div className="w-screen h-screen bg-[#14213D] text-white flex flex-col p-4">
            <h1 className="text-[69px] font-semibold mt-[70px] pl-[140px]">Рейтинг команд</h1>
            <TeamRatingTable />
            <div className="mx-auto">
                <ReturnButton />
            </div>
        </div>
    );
};

export default RatingPage;


File: page.tsx

"use client";
import React from 'react';
import TeamRatingTable from '../components/TeamResultTable';
import ReturnButton from '../components/ReturnButton';

const RatingPage: React.FC = () => {
    return (
        <div className="w-screen h-screen bg-[#14213D] text-white flex flex-col p-4">
            <h1 className="text-[69px] font-semibold mt-[70px] pl-[140px]">Рейтинг команд</h1>
            <TeamRatingTable />
            <div className="mx-auto">
                <ReturnButton />
            </div>
        </div>
    );
};

export default RatingPage;


File: page.tsx

"use client";
import React from 'react';
import TeamRatingTable from '../components/TeamResultTable';
import ReturnButton from '../components/ReturnButton';

const ResultPage: React.FC = () => {
    return (
        <div className="w-screen h-screen bg-[#14213D] text-white flex flex-col p-4">
            <h1 className="text-[69px] font-semibold mt-[70px] pl-[140px]">Результаты игры</h1>
            <TeamRatingTable />
            <div className="mx-auto">
                <ReturnButton />
            </div>
        </div>
    );
};

export default ResultPage;


File: page.tsx
"use client";
import React from "react";
import RulesContent from "../components/RulesContent";
import { useRouter } from "next/navigation";

const RulesPage: React.FC = () => {
    const router = useRouter();
    const handleHomeClick = () => {
        router.push("/");
    };

    return (
        <div className="w-screen h-screen bg-[#FFFFFC] text-white flex flex-col">
            <div className="flex-grow container mr-auto p-10">
                <RulesContent />
            </div>
            <div className="flex justify-center p-5">
                <div className="relative">
                    <div className="absolute inset-0 bg-[#f5f5f5] rounded-full blur-md w-[80px] h-[80px]"></div>
                    <img
                        src="/House.svg"
                        alt="House icon"
                        className="h-[130px] w-[130px] cursor-pointer relative z-10"
                        onClick={handleHomeClick}
                    />
                </div>
            </div>
        </div>
    );
};

export default RulesPage;


File: page.tsx
"use client";
import React from 'react';
import WinPage from '../components/WinPage';

const WinnerPage: React.FC = () => {
    return (
        <div className="w-screen h-screen bg-[#1c2536] text-[#f4c542]">
            <WinPage winnerName="Иван Иванов" />
        </div>
    );
};

export default WinnerPage;

